/*
Deployment script for LCCHPPublic

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "LCCHPPublic"
:setvar DefaultFilePrefix "LCCHPPublic"
:setvar DefaultDataPath "D:\MSSQL\Data\"
:setvar DefaultLogPath "D:\MSSQL\Log\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
The column [dbo].[BloodTestResults].[HistoricLabID] is being dropped, data loss could occur.
*/

IF EXISTS (select top 1 1 from [dbo].[BloodTestResults])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
/*
Table [dbo].[DateRanges] is being dropped.  Deployment will halt if the table contains data.
*/

IF EXISTS (select top 1 1 from [dbo].[DateRanges])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
/*
Table [dbo].[LabOriginal] is being dropped.  Deployment will halt if the table contains data.
*/

IF EXISTS (select top 1 1 from [dbo].[LabOriginal])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
PRINT N'Dropping [dbo].[BloodTestResults].[HistoricLabID].[MS_Description]...';


GO
EXECUTE sp_dropextendedproperty @name = N'MS_Description', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'BloodTestResults', @level2type = N'COLUMN', @level2name = N'HistoricLabID';


GO
PRINT N'Dropping [dbo].[CK_PositiveRange]...';


GO
ALTER TABLE [dbo].[DateRanges] DROP CONSTRAINT [CK_PositiveRange];


GO
PRINT N'Dropping [dbo].[DateRanges]...';


GO
DROP TABLE [dbo].[DateRanges];


GO
PRINT N'Dropping [dbo].[LabOriginal]...';


GO
DROP TABLE [dbo].[LabOriginal];


GO
PRINT N'Altering [dbo].[BloodTestResults]...';


GO
ALTER TABLE [dbo].[BloodTestResults] DROP COLUMN [HistoricLabID];


GO
ALTER TABLE [dbo].[BloodTestResults]
    ADD [HistoricLabResultsID] VARCHAR (10) NULL;


GO
PRINT N'Altering [dbo].[Family]...';


GO
ALTER TABLE [dbo].[Family] ALTER COLUMN [Pets] TINYINT NULL;


GO
ALTER TABLE [dbo].[Family]
    ADD [FrequentlyWashPets] BIT NULL;


GO
PRINT N'Altering [dbo].[Property]...';


GO
ALTER TABLE [dbo].[Property]
    ADD [Street] VARCHAR (50) NULL;


GO
PRINT N'Creating [dbo].[TravelNotes]...';


GO
CREATE TABLE [dbo].[TravelNotes] (
    [TravelNotesID] INT            IDENTITY (1, 1) NOT NULL,
    [FamilyID]      INT            NOT NULL,
    [CreatedDate]   DATETIME       NULL,
    [Notes]         VARCHAR (3000) NOT NULL,
    [StartDate]     DATE           NULL,
    [EndDate]       DATE           NULL,
    CONSTRAINT [PK_TravelNotes] PRIMARY KEY CLUSTERED ([TravelNotesID] ASC)
);


GO
PRINT N'Creating [dbo].[DF_TravelNotes_CreatedDate]...';


GO
ALTER TABLE [dbo].[TravelNotes]
    ADD CONSTRAINT [DF_TravelNotes_CreatedDate] DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[FK_TravelNotes_Family]...';


GO
ALTER TABLE [dbo].[TravelNotes] WITH NOCHECK
    ADD CONSTRAINT [FK_TravelNotes_Family] FOREIGN KEY ([FamilyID]) REFERENCES [dbo].[Family] ([FamilyID]);


GO
PRINT N'Altering [dbo].[trUpdateStatus]...';


GO
ALTER trigger [dbo].[trUpdateStatus] on [dbo].[TargetStatus] AFTER UPDATE
	as
	 begin
	  if @@rowcount = 0
		return
	  if not update(ModifiedDate) update TargetStatus set ModifiedDate = getdate() where StatusID in (select StatusID from inserted)

	end
GO
PRINT N'Creating [dbo].[vNursingMothers]...';


GO
CREATE View vNursingMothers
AS
	Select P.PersonID, P.LastName,P.FirstName,P.Age
			, Q1.isNursing, Q2.QuestionnaireDate 
			, Q2.QuestionnaireID
	From [questionnaire] As Q1
	Inner Join (
		Select max(QuestionnaireID) AS QuestionnaireID,personID
			  ,max(QuestionnaireDate) as [QuestionnaireDate]
		From [Questionnaire]
		Group By [personID]) As [Q2]
	On Q1.QuestionnaireID = Q2.QuestionnaireID
	INNER JOIN Person AS P on P.PersonID = Q1.PersonID
	where Q1.isNursing = 1
GO
PRINT N'Altering [dbo].[usp_upFamily]...';


GO

-- =============================================
-- Author:		William Thier
-- Create date: 20150214
-- Description:	Stored Procedure to update Family information
-- =============================================

ALTER PROCEDURE [dbo].[usp_upFamily]  
	-- Add the parameters for the stored procedure here
	@Family_ID int = NULL,
	@New_Last_Name varchar(50) = NULL,
	@New_Number_of_Smokers tinyint = 0,
	@New_Primary_Language_ID tinyint = 1,
	@New_Notes varchar(3000) = NULL,
	@New_Pets tinyint = NULL,
	@New_Frequently_Wash_Pets bit = NULL,
	@New_in_and_out bit = NULL,
	@New_Primary_Property_ID int = NULL,
	@DEBUG BIT = 0

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	DECLARE @ErrorLogID int, @spupdateFamilysqlStr nvarchar(4000)
			, @NotesID INT, @Recompile BIT = 1;
	
	-- BUILD update statement
	IF (@New_Last_Name IS NULL)
		SELECT @New_Last_Name = LastName from family where FamilyID = @Family_ID;
	
	SELECT @spupdateFamilysqlStr = N'update Family set Lastname = @LastName'

	IF (@New_Number_of_Smokers IS NOT NULL)
		SELECT @spupdateFamilysqlStr = @spupdateFamilysqlStr + N', NumberofSmokers = @NumberofSmokers'

	IF (@New_Primary_Language_ID IS NOT NULL)
		SELECT @spupdateFamilysqlStr = @spupdateFamilysqlStr + N', PrimaryLanguageID = @PrimaryLanguageID'

	IF (@New_Pets IS NOT NULL)
		SELECT @spupdateFamilysqlStr = @spupdateFamilysqlStr + N', Pets = @Pets'

	IF (@New_Pets IS NOT NULL)
		SELECT @spupdateFamilysqlStr = @spupdateFamilysqlStr + N', FrequentlyWashPets = @New_Frequently_Wash_Pets'	
			
	IF (@New_in_and_out IS NOT NULL)
		SELECT @spupdateFamilysqlStr = @spupdateFamilysqlStr + N', inandout = @inandout'

	IF (@New_Primary_Property_ID IS NOT NULL)
		SELECT @spupdateFamilysqlStr = @spupdateFamilysqlStr + N', PrimaryPropertyID = @PrimaryPropertyID'

	SELECT @spupdateFamilysqlStr = @spupdateFamilysqlStr + N' WHERE FamilyID = @FamilyID'

	BEGIN TRY -- update Family information
		IF @DEBUG = 1
			SELECT @spupdateFamilysqlStr, 'Lastname' = @New_Last_Name, 'NumberofSmokers' = @New_Number_of_Smokers
				, 'PrimaryLanguageID' = @New_Primary_Language_ID, 'Notes' = @New_Notes
			IF (@New_Notes IS NOT NULL)
			BEGIN
				EXEC	[dbo].[usp_InsertFamilyNotes]
							@Family_ID = @Family_ID,
							@Notes = @New_Notes,
							@InsertedNotesID = @NotesID OUTPUT
			END
			EXEC [sp_executesql] @spupdateFamilysqlStr
				, N'@LastName VARCHAR(50), @NumberofSmokers tinyint, @PrimaryLanguageID tinyint
				, @Pets BIT, @inandout BIT, @PrimaryPropertyID int, @FamilyID int'
				, @LastName = @New_Last_Name
				, @NumberofSmokers = @New_Number_of_Smokers
				, @PrimaryLanguageID = @New_Primary_Language_ID
				, @Pets = @New_Pets
				, @inandout = @New_in_and_out
				, @PrimaryPropertyID = @New_Primary_Property_ID
				, @FamilyID = @Family_ID
	END TRY -- update Family
	BEGIN CATCH
		-- Call procedure to print error information.
		EXECUTE dbo.uspPrintError;

		-- Roll back any active or uncommittable transactions before
		-- inserting information in the ErrorLog.
		IF XACT_STATE() <> 0
		BEGIN
			ROLLBACK TRANSACTION;
		END

		EXECUTE dbo.uspLogError @ErrorLogID = @ErrorLogID OUTPUT;
		RETURN ERROR_NUMBER()
	END CATCH; 
END
GO
PRINT N'Altering [dbo].[usp_SlChildStatus]...';


GO
-- =============================================
-- Author:		Liam Thier
-- Create date: 20150215
-- Description:	returns valid status codes for passed in type - Child
-- =============================================
ALTER PROCEDURE [dbo].[usp_SlChildStatus] 
	-- Add the parameters for the stored procedure here
	@TargetType varchar(50) = NULL, 
	@DEBUG BIT  = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SET @TargetType = 'Child'
		select statusName from TargetStatus where TargetType = @TargetType

END
GO
PRINT N'Altering [dbo].[usp_SlTargetSampleType]...';


GO
-- =============================================
-- Author:		Liam Thier
-- Create date: 20150102
-- Description:	retrieve sample types for people (lead levels)
-- =============================================
ALTER PROCEDURE [dbo].[usp_SlTargetSampleType] 
	-- Add the parameters for the stored procedure here
	@Sample_Target varchar(50) = NULL, 
	@p2 int = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @spexecutesqlStr nvarchar(4000), @RECOMPILE bit =1;
    -- Insert statements for procedure here

	SELECT @spexecutesqlStr = 'SELECT [SampleTypeID],[SampleTypeName] from [SampleType] where 1=1'
	
	if (@Sample_Target IS NOT NULL)
		SELECT @spexecutesqlStr = @spexecutesqlStr + ' AND [SampleType].[SampleTarget] = @SampleTarget'

	IF @Recompile = 1
		SELECT @spexecutesqlStr = @spexecutesqlStr + ' OPTION(RECOMPILE)';

	EXEC [sp_executesql] @spexecutesqlStr
		, N'@SampleTarget varchar(50)', @SampleTarget = @Sample_Target
END
GO
PRINT N'Creating [dbo].[usp_InsertTravelNotes]...';


GO


-- =============================================
-- Author:		Liam Thier
-- Create date: 20150319
-- Description:	stored procedure to insert Travel notes
-- =============================================
CREATE PROCEDURE [dbo].[usp_InsertTravelNotes] 
	-- Add the parameters for the stored procedure here
	@Family_ID int = NULL, 
	@Travel_Notes VARCHAR(3000) = NULL,
	@Start_Date date = NULL,
	@End_Date date = NULL,
	@InsertedNotesID INT OUTPUT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	DECLARE @ErrorLogID int

    -- Insert statements for procedure here
	BEGIN TRY -- update Property information
		INSERT INTO TravelNotes (FamilyID, Notes, StartDate, EndDate) 
				values (@Family_ID, @Travel_Notes, @Start_Date, @End_Date);
		SET @InsertedNotesID = SCOPE_IDENTITY();
	END TRY
	BEGIN CATCH
		-- Call procedure to print error information.
		EXECUTE dbo.uspPrintError;

		-- Roll back any active or uncommittable transactions before
		IF XACT_STATE() <> 0
		BEGIN
			ROLLBACK TRANSACTION;
		END

		-- inserting information in the ErrorLog.
		EXECUTE dbo.uspLogError @ErrorLogID = @ErrorLogID OUTPUT;
		RETURN ERROR_NUMBER()
	END CATCH; 
END
GO
PRINT N'Creating [dbo].[usp_SlDaycare]...';


GO

-- =============================================
-- Author:		Liam Thier
-- Create date: 20150319
-- Description:	returns daycare name, id, description
-- =============================================
CREATE PROCEDURE [dbo].[usp_SlDaycare] 
	-- Add the parameters for the stored procedure here
	@DEBUG BIT  = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	select DaycareID,DaycareName,DaycareDescription from Daycare

END
GO
PRINT N'Creating [dbo].[usp_SLListNursingMothers]...';


GO


-- =============================================
-- Author:		Liam Thier
-- Create date: 20150315
-- Description:	stored procedure to list nursing
--				mothers. 
--				If @Count is set to 1, returns the
--				number of nusring mothers
-- =============================================
CREATE PROCEDURE [dbo].[usp_SLListNursingMothers]
	-- Add the parameters for the stored procedure here
	  @PersonID int = NULL
	, @Count BIT = 0 -- If 1 return county only, if 0 return full list
	, @DEBUG BIT = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	DECLARE @spexecuteSQLStr NVARCHAR(4000)
			, @Recompile  BIT = 1, @ErrorLogID int;
	
	BEGIN TRY
		SELECT @spexecuteSQLStr =
			N'SELECT [PersonID],[QuestionnaireID],[LastName],[FirstName],[Age],[isNursing],[QuestionnaireDate] 
			from vNursingMothers where 1=1';

		IF (@PersonID IS NOT NULL) 
			SELECT @spexecuteSQLStr = @spexecuteSQLStr
				+ N' AND [PersonID] = @PersonID';

		SELECT @spexecuteSQLStr = @spexecuteSQLStr
			+ N' order by [PersonID], [lastname]';

		-- select how many nursing mothers there are
		IF (@Count = 1)
		BEGIN
			SELECT @spexecuteSQLStr = N'SELECT count([PersonID]) from vNursingMothers';
			SET @Recompile = 0;
		END

		IF (@PersonID IS NULL) 
			SET @Recompile = 0;
	
		-- Recompile the stored procedure if the query return list is sufficiently small
		IF @Recompile = 1
			SELECT @spexecuteSQLStr = @spexecuteSQLStr + N' OPTION(RECOMPILE)';

		-- If debugging, output the query string
		IF @DEBUG = 1
			SELECT @spexecuteSQLStr, @PersonID

		EXEC [sp_executesql] @spexecuteSQLStr
			, N'@Person_ID int'
			, @Person_ID = @PersonID;
	END TRY
			BEGIN CATCH
			-- Call procedure to print error information.
			EXECUTE dbo.uspPrintError;

			-- Roll back any active or uncommittable transactions before
			-- inserting information in the ErrorLog.
			IF XACT_STATE() <> 0
			BEGIN
				ROLLBACK TRANSACTION;
			END

			EXECUTE dbo.uspLogError @ErrorLogID = @ErrorLogID OUTPUT;
			RETURN ERROR_NUMBER()
		END CATCH;
END
GO
PRINT N'Creating [dbo].[usp_SlStatus]...';


GO
-- =============================================
-- Author:		Liam Thier
-- Create date: 20150215
-- Description:	returns valid status codes for passed in type - Child
-- =============================================
CREATE PROCEDURE [dbo].[usp_SlStatus] 
	-- Add the parameters for the stored procedure here
	@TargetType varchar(50) = NULL, 
	@DEBUG BIT  = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	-- IF (@StatusType = 'Child')
		select statusName from TargetStatus where TargetType = @TargetType

END
GO
PRINT N'Altering [dbo].[usp_InsertFamily]...';


GO

-- =============================================
-- Author:		William Thier
-- Create date: 20140205
-- Description:	Stored Procedure to insert new Family information
-- =============================================

ALTER PROCEDURE [dbo].[usp_InsertFamily]  
	-- Add the parameters for the stored procedure here
	@LastName varchar(50) = NULL,
	@NumberofSmokers tinyint = 0,
	@PrimaryLanguageID tinyint = 1,
	@Notes varchar(3000) = NULL,
	@New_Travel_Notes varchar(3000) = NULL,
	@Travel_Start_Date date = NULL,
	@Travel_End_Date date = NULL,
	@Pets tinyint = NULL,
	@inandout bit = NULL,
	@PrimaryPropertyID int = NULL,
	@FrequentlyWashPets bit = NULL,
	@FID int OUTPUT

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	DECLARE @ErrorLogID int, @FamilyNotesReturnValue int, @InsertedFamilyNotesID int
			, @TravelNotesReturnValue int, @InsertedTravelNotesID int;

	BEGIN TRY -- insert Family
		BEGIN TRANSACTION InsertFamilyTransaction
			INSERT into Family ( LastName,  NumberofSmokers,  PrimaryLanguageID, Pets, inandout
						, PrimaryPropertyID) 
						Values (@LastName, @NumberofSmokers, @PrimaryLanguageID, @Pets, @inandout
						, @PrimaryPropertyID)
			SET @FID = SCOPE_IDENTITY();  -- uncomment to return primary key of inserted values

			IF (@Notes IS NOT NULL)
				EXEC	@FamilyNotesReturnValue = [dbo].[usp_InsertFamilyNotes]
													@Family_ID = @FID,
													@Notes = @Notes,
													@InsertedNotesID = @InsertedFamilyNotesID OUTPUT
	
			IF (@New_Travel_Notes IS NOT NULL)
				EXEC	@TravelNotesReturnValue = [dbo].[usp_InsertTravelNotes]
						@Family_ID = @FID,
						@Travel_Notes = @New_Travel_Notes,
						@Start_Date = @Travel_Start_Date,
						@End_Date = @Travel_End_Date,
						@InsertedNotesID = @InsertedTravelNotesID OUTPUT

		COMMIT TRANSACTION InsertFamilyTransaction
	END TRY
	BEGIN CATCH
		-- Call procedure to print error information.
		EXECUTE dbo.uspPrintError;

		-- Roll back any active or uncommittable transactions before
		-- inserting information in the ErrorLog.
		IF XACT_STATE() <> 0
		BEGIN
			ROLLBACK TRANSACTION;
		END

		EXECUTE dbo.uspLogError @ErrorLogID = @ErrorLogID OUTPUT;
		RETURN ERROR_NUMBER();
	END CATCH; 
END
GO
PRINT N'Altering [dbo].[usp_InsertNewFamilyWebScreen]...';


GO


-- =============================================
-- Author:		Liam Thier
-- Create date: 20141115
-- Description:	stored procedure to insert data from the Add a new family web page
-- =============================================
-- 20150102	Fixed bug with family/property association checking
ALTER PROCEDURE [dbo].[usp_InsertNewFamilyWebScreen]
	-- Add the parameters for the stored procedure here
	@FamilyLastName varchar(50) = NULL, 
	@Address_Line1 varchar(100) = NULL,
	@ApartmentNum varchar(10) = NULL,
	@CityName varchar(50) = NULL,
	@StateAbbr char(2) = NULL,
	@ZipCode varchar(10) = NULL,
	@Year_Built date = NULL,
	@Owner_id int = NULL,
	@is_Owner_Occupied bit = NULL,
	@is_Residential bit = NULL,
	@has_Peeling_Chipping_Paint bit = NULL,
	@is_Rental bit = NULL,
	@HomePhone bigint = NULL,
	@WorkPhone bigint = NULL,
	@Language tinyint = NULL, 
	@NumSmokers tinyint = NULL,
	@Pets tinyint = NULL,
	@Frequently_Wash_Pets bit = NULL,
	@Petsinandout bit = NULL,
	@FamilyNotes varchar(3000) = NULL,
	@PropertyNotes varchar(3000) = NULL,
	@Travel_Notes varchar(3000) = NULL,
	@Travel_Start_Date varchar(3000) = NULL,
	@Travel_End_Date varchar(3000) = NULL,
	@DEBUG BIT = 0,
	@FamilyID int OUTPUT

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	IF (@FamilyLastName IS NULL
		AND @Address_Line1 IS NULL
		AND @ApartmentNum IS NULL
		AND @HomePhone IS NULL
		AND @WorkPhone IS NULL)
	BEGIN
		RAISERROR ('You must supply at least one of the following: Family name, StreetNumber, Street Name, Street Suffix, Apartment number, Home phone, or Work phone', 11, -1);
		RETURN;
	END;

	BEGIN
		DECLARE @PhoneTypeID tinyint, 
				@Family_return_value int,
				@PropID int, @LID tinyint,
				@PhoneNumberID_OUTPUT int,
				@Homephone_return_value int,
				@Workphone_return_value int,
				@NewFamilyNotesID int,
				@TravelNotesReturnValue int,
				@ErrorLogID int;

		BEGIN TRY
			-- Insert the property address if it doesn't already exist
			-- NEED TO RETRIEVE PROPERTY ID IF IT ALREADY EXISTS
			SELECT @PropID = PropertyID from Property where
					AddressLine1 = @Address_Line1 and City = @CityName and [State] = @StateAbbr and Zipcode = @ZipCode

			--if (@is_Owner_Occupied = 1) 
			--	select @Owner_id = IDENT_CURRENT('Family')+1

			if ( @PropID is NULL)
			BEGIN -- enter property
				EXEC	[dbo].[usp_InsertProperty] 
						@AddressLine1 = @Address_Line1,
						@City = @CityName,
						@State = @StateAbbr,
						@Zipcode = @ZipCode,
						@New_PropertyNotes = @PropertyNotes,
						@YearBuilt = @Year_Built,
						@Ownerid = @Owner_id,
						@isOwnerOccuppied = @is_Owner_Occupied,
						@isResidential = @is_Residential,
						@hasPeelingChippingPaint = @has_Peeling_Chipping_Paint,
						@isRental = @is_Rental,

						@PropertyID = @PropID OUTPUT;
					END -- enter property
			-- Check if Family is already associated with property, if so, skip insert and return warning:
			if ((select count(PrimarypropertyID) from Family where LastName = @FamilyLastName and PrimaryPropertyID = @PropID) > 0)
			BEGIN
				-- update address in the future??
				RAISERROR ('Family is already associated with that Property', 11, -1);
				RETURN;
			END
			ELSE
			BEGIN
				EXEC	[dbo].[usp_InsertFamily]
						@LastName = @FamilyLastName,
						@NumberofSmokers = @NumSmokers,
						@PrimaryLanguageID = @Language,
						@Pets = @Pets,
						@FrequentlyWashPets = @Frequently_Wash_Pets,
						@inandout = @Petsinandout,
						@PrimaryPropertyID = @PropID,
						@Notes = @FamilyNotes,
						@New_Travel_Notes = @Travel_Notes,
						@Travel_Start_Date = @Travel_Start_Date,
						@Travel_End_Date = @Travel_End_Date,
						@FID = @FamilyID OUTPUT;
			END

			if (@HomePhone is not NULL) 
			BEGIN  -- insert Home Phone
				SELECT @PhoneTypeID = PhoneNumberTypeID from PhoneNumberType where PhoneNumberTypeName = 'Home Phone';
				
				EXEC	@Homephone_return_value = [dbo].[usp_InsertPhoneNumber]
						@PhoneNumber = @HomePhone,
						@PhoneNumberTypeID = @PhoneTypeID,
						@PhoneNumberID_OUTPUT = @PhoneNumberID_OUTPUT OUTPUT
			END  -- insert Home Phone

			if (@WorkPhone is not NULL) 
			BEGIN  -- insert Work Phone
				SELECT @PhoneTypeID = PhoneNumberTypeID from PhoneNumberType where PhoneNumberTypeName = 'Work Phone';

				EXEC	@Workphone_return_value = [dbo].[usp_InsertPhoneNumber]
						@PhoneNumber = @HomePhone,
						@PhoneNumberTypeID = @PhoneTypeID,
						@PhoneNumberID_OUTPUT = @PhoneNumberID_OUTPUT OUTPUT
			END  -- insert Work Phone
		END TRY
		BEGIN CATCH
			-- Call procedure to print error information.
			EXECUTE dbo.uspPrintError;

			-- Roll back any active or uncommittable transactions before
			-- inserting information in the ErrorLog.
			IF XACT_STATE() <> 0
			BEGIN
				ROLLBACK TRANSACTION;
			END

			EXECUTE dbo.uspLogError @ErrorLogID = @ErrorLogID OUTPUT;
			RETURN ERROR_NUMBER()
		END CATCH; 
	END
END
GO
PRINT N'Creating [dbo].[TravelNotes].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Collection of family and travel notes', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'TravelNotes';


GO
PRINT N'Creating [dbo].[TravelNotes].[CreatedDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'date the notes where added', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'TravelNotes', @level2type = N'COLUMN', @level2name = N'CreatedDate';


GO
PRINT N'Creating [dbo].[vNursingMothers].[MS_DiagramPane1]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_DiagramPane1', @value = N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[40] 4[20] 2[20] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "u"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 136
               Right = 255
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "q"
            Begin Extent = 
               Top = 6
               Left = 293
               Bottom = 119
               Right = 467
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 1035
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'vNursingMothers';


GO
PRINT N'Creating [dbo].[vNursingMothers].[MS_DiagramPaneCount]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_DiagramPaneCount', @value = 1, @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'vNursingMothers';


GO
PRINT N'Creating [dbo].[BloodTestResults].[HistoricLabResultsID].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'historic lab results id from access database', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'BloodTestResults', @level2type = N'COLUMN', @level2name = N'HistoricLabResultsID';


GO
PRINT N'Refreshing [dbo].[usp_InsertBloodTestResults]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_InsertBloodTestResults]';


GO
PRINT N'Refreshing [dbo].[usp_SLAllBloodTestResultsMetaData]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_SLAllBloodTestResultsMetaData]';


GO
PRINT N'Refreshing [dbo].[usp_SLInsertedDataMetaData]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_SLInsertedDataMetaData]';


GO
PRINT N'Refreshing [dbo].[usp_InsertNewBloodLeadTestResultsWebScreen]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_InsertNewBloodLeadTestResultsWebScreen]';


GO
PRINT N'Refreshing [dbo].[usp_InsertHistoricFamily]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_InsertHistoricFamily]';


GO
PRINT N'Refreshing [dbo].[usp_InsertNewClientWebScreen]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_InsertNewClientWebScreen]';


GO
PRINT N'Refreshing [dbo].[usp_SLInsertedDataSimplified]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_SLInsertedDataSimplified]';


GO
PRINT N'Refreshing [dbo].[usp_InsertProperty]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_InsertProperty]';


GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[TravelNotes] WITH CHECK CHECK CONSTRAINT [FK_TravelNotes_Family];


GO
PRINT N'Update complete.';


GO
