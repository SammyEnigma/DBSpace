/*
Deployment script for LCCHPTest

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "LCCHPPublic"
:setvar DefaultFilePrefix "LCCHPPublic"
:setvar DefaultDataPath "D:\MSSQL\Data\"
:setvar DefaultLogPath "D:\MSSQL\Log\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO

PRINT N'Renaming Family.inandout to Family.Petsinandout'

EXEC sp_rename 'Family.inandout','Petsinandout'

PRINT N'Altering [dbo].[usp_InsertPerson]...';


GO


-- =============================================
-- Author:		William Thier
-- Create date: 20130506
-- Description:	Stored Procedure to insert new people records
-- =============================================
-- DROP PROCEDURE usp_InsertPerson
ALTER PROCEDURE [dbo].[usp_InsertPerson]   -- usp_InsertPerson "Bonifacic",'James','Marco','19750205','M'
	-- Add the parameters for the stored procedure here
	@FirstName varchar(50) = NULL,
	@MiddleName varchar(50) = NULL,
	@LastName varchar(50) = NULL, 
	@BirthDate date = NULL,
	@Gender char(1) = NULL,
	@StatusID smallint = NULL,
	@ForeignTravel bit = NULL,
	@OutofSite bit = NULL,
	@EatsForeignFood bit = NULL,
	@PatientID smallint = NULL,
	@RetestDate datetime = NULL,
	@Moved bit = NULL,
	@MovedDate date = NULL,
	@isClosed bit = 0,
	@isResolved bit = 0,
	@New_Notes varchar(3000) = NULL,
	@GuardianID int = NULL,
	@isSmoker bit = NULL,
	@isClient bit = 1,
	@isNursing bit = 0,
	@isPregnant bit = 0,
	@OverrideDuplicate bit = 0,
	@PID int OUTPUT 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @ErrorLogID int, @NotesID int;

	-- set default retest date if none specified
	IF @RetestDate is null
		SET @RetestDate = DATEADD(yy,1,GetDate());
	
	Select @PID = PersonID from Person where Lastname = @LastName and FirstName = @FirstName AND BirthDate = @BirthDate;
	IF (@PID IS NOT NULL AND @OverrideDuplicate = 0)
	BEGIN
		DECLARE @ErrorString VARCHAR(3000);
		SET @ErrorString ='Person appears to be a duplicate of personID: ' + cast(@PID as varchar(256))
		RAISERROR (@ErrorString, 11, -1);
		RETURN;
	END	

    -- Insert statements for procedure here
	BEGIN TRY
		 INSERT into person ( LastName,  FirstName,  MiddleName,  BirthDate,  Gender,  StatusID, 
							  ForeignTravel,  OutofSite,  EatsForeignFood,  PatientID,  RetestDate, 
							  Moved,  MovedDate,  isClosed,  isResolved,  GuardianID,  isSmoker, 
							  isClient, isNursing, isPregnant) 
					 Values (@LastName, @FirstName, @MiddleName, @BirthDate, @Gender, @StatusID,
							 @ForeignTravel, @OutofSite, @EatsForeignFood, @PatientID, @RetestDate,
							 @Moved, @MovedDate, @isClosed, @isResolved,  @GuardianID, @isSmoker, 
							 @isClient, @isNursing, @isPregnant);
		SET @PID = SCOPE_IDENTITY();

		IF (@New_Notes IS NOT NULL)
			EXEC	[dbo].[usp_InsertPersonNotes]
								@Person_ID = @PID,
								@Notes = @New_Notes,
								@InsertedNotesID = @NotesID OUTPUT
	END TRY
	BEGIN CATCH
		-- Call procedure to print error information.
		EXECUTE dbo.uspPrintError;

		-- Roll back any active or uncommittable transactions before
		-- inserting information in the ErrorLog.
		IF XACT_STATE() <> 0
		BEGIN
			ROLLBACK TRANSACTION;
		END

		EXECUTE dbo.uspLogError @ErrorLogID = @ErrorLogID OUTPUT;
		RETURN ERROR_NUMBER()
	END CATCH;
END
GO
PRINT N'Altering [dbo].[usp_InsertPersontoPerson]...';


GO



-- =============================================
-- Author:		William Thier
-- Create date: 20150323
-- Description:	Stored Procedure to insert 
--              new PersontoPerson records how 
--              they are related
-- =============================================

ALTER PROCEDURE [dbo].[usp_InsertPersontoPerson]   -- usp_InsertPersontoPerson
	-- Add the parameters for the stored procedure here
	@Person1ID int = NULL,
	@Person2ID smallint = NULL,
	@RelationshipType int = NULL,
	@isGuardian bit = NULL, -- True if P1 is guardian of P2
	@isPrimaryContact bit = NULL
	--@EndDate date = NULL,
	--@GroupID varchar(20) = NULL

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @ErrorLogID int;
    -- Insert statements for procedure here
	BEGIN TRY
		 INSERT into PersontoPerson( Person1ID, Person2ID, RelationshipTypeID, isGuardian, isPrimaryContact ) 
					 Values ( @Person1ID, @Person2ID, @RelationShipType, @isGuardian, @isPrimaryContact )
		 
		 -- Switch isGuardian information to update reciprocal relationship
		 --IF (@isGuardian = 1) SET @isGuardian = 0;
		 --ELSE SET @isGuardian = 1;
		 
		 --INSERT into PersontoPerson (Person1ID, Person2ID, isGuardian) values (@Person2ID, @Person1ID, @isGuardian)

	END TRY
	BEGIN CATCH
		-- Call procedure to print error information.
		EXECUTE dbo.uspPrintError;

		-- Roll back any active or uncommittable transactions before
		-- inserting information in the ErrorLog.
		IF XACT_STATE() <> 0
		BEGIN
			ROLLBACK TRANSACTION;
		END

		EXECUTE dbo.uspLogError @ErrorLogID = @ErrorLogID OUTPUT;
		RETURN ERROR_NUMBER()
	END CATCH;
END
GO
PRINT N'Altering [dbo].[usp_SLInsertedDataSimplified]...';


GO

-- =============================================
-- Author:		William Thier
-- Create date: 20130509
-- Description:	
-- =============================================
ALTER PROCEDURE [dbo].[usp_SLInsertedDataSimplified] 
	-- Add the parameters for the stored procedure here
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @spexecutesqlStr	NVARCHAR(4000),
			@Recompile BIT = 1, @ErrorLogID int
			, @DEBUG BIT = 0;

    -- Insert statements for procedure here
	BEGIN TRY
	SELECT [P].[PersonID] 
		, 'P2FPersonID' = [P2F].[PersonID]
		, 'FamilyLastName' = [F].[Lastname]
		, [F].[FamilyID]
		, 'P2FFamilyID' = [P2F].[FamilyID]
		, [P].[LastName]
		, [P].[MiddleName]
		, [P].[FirstName]
		, [P].[BirthDate]
		, [P].[Gender]
		--, 'StreetAddress' = cast([Prop].[StreetNumber] as varchar)
		--	+ ' '+ cast([Prop].[Street] as varchar) + ' ' 
		--	+ cast([Prop].[StreetSuffix] as varchar)
		--, [Prop].[ApartmentNumber]
		--, [Prop].[City]
		--, [Prop].[State]
		--, [Prop].[Zipcode]
		--, 'PrimaryPhoneNumber' = [Ph].[PhoneNumber]
		--, [L].[LanguageName]
		, [F].[NumberofSmokers]
		, [F].[Pets]
		, [F].[Petsinandout]
		, [FN].[Notes]

	FROM [Person] AS [P]
	FULL OUTER JOIN [PersontoFamily] as [P2F] on [P].[PersonID] = [P2F].[PersonID]
	FULL OUTER JOIN [Family] AS [F] on [F].[FamilyID] = [P2F].[FamilyID]
	FULL OUTER JOIN [FamilyNotes] AS [FN] on [F].[FamilyID] = [FN].[FamilyID]
--	FULL OUTER JOIN [PersontoProperty] as [P2P] on [P].PersonID = [P2P].[PersonID]
--	FULL OUTER JOIN [Property] as [Prop] on [Prop].[PropertyID] = [F].[PrimaryPropertyID]
	-- where [P2F].FamilyID is NULL
	--  People to families: 3470

	
	END TRY
	BEGIN CATCH
		-- Call procedure to print error information.
		EXECUTE dbo.uspPrintError;

		-- Roll back any active or uncommittable transactions before
		-- inserting information in the ErrorLog.
		IF XACT_STATE() <> 0
		BEGIN
			ROLLBACK TRANSACTION;
		END

		EXECUTE dbo.uspLogError @ErrorLogID = @ErrorLogID OUTPUT;
		RETURN ERROR_NUMBER()
	END CATCH;
END
GO
PRINT N'Altering [dbo].[usp_upFamily]...';


GO

-- =============================================
-- Author:		William Thier
-- Create date: 20150214
-- Description:	Stored Procedure to update Family information
-- =============================================

ALTER PROCEDURE [dbo].[usp_upFamily]  
	-- Add the parameters for the stored procedure here
	@Family_ID int = NULL,
	@New_Last_Name varchar(50) = NULL,
	@New_Number_of_Smokers tinyint = 0,
	@New_Primary_Language_ID tinyint = 1,
	@New_Notes varchar(3000) = NULL,
	@New_Pets tinyint = NULL,
	@New_Frequently_Wash_Pets bit = NULL,
	@New_Pets_in_and_out bit = NULL,
	@New_Primary_Property_ID int = NULL,
	@New_ForeignTravel bit = NULL,
	@DEBUG BIT = 0

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	DECLARE @ErrorLogID int, @spupdateFamilysqlStr nvarchar(4000)
			, @NotesID INT, @Recompile BIT = 1;
	
	BEGIN TRY -- update Family information
		-- BUILD update statement
		IF (@New_Last_Name IS NULL)
			SELECT @New_Last_Name = LastName from family where FamilyID = @Family_ID;
	
		SELECT @spupdateFamilysqlStr = N'update Family set Lastname = @LastName'

		IF (@New_Number_of_Smokers IS NOT NULL)
			SELECT @spupdateFamilysqlStr = @spupdateFamilysqlStr + N', NumberofSmokers = @NumberofSmokers'

		IF (@New_Primary_Language_ID IS NOT NULL)
			SELECT @spupdateFamilysqlStr = @spupdateFamilysqlStr + N', PrimaryLanguageID = @PrimaryLanguageID'

		IF (@New_Pets IS NOT NULL)
			SELECT @spupdateFamilysqlStr = @spupdateFamilysqlStr + N', Pets = @Pets'

		IF (@New_Frequently_Wash_Pets IS NOT NULL)
			SELECT @spupdateFamilysqlStr = @spupdateFamilysqlStr + N', FrequentlyWashPets = @FrequentlyWashPets'	
			
		IF (@New_Pets_in_and_out IS NOT NULL)
			SELECT @spupdateFamilysqlStr = @spupdateFamilysqlStr + N', Petsinandout = @Petsinandout'

		IF (@New_Primary_Property_ID IS NOT NULL)
			SELECT @spupdateFamilysqlStr = @spupdateFamilysqlStr + N', PrimaryPropertyID = @PrimaryPropertyID'

		IF (@New_ForeignTravel IS NOT NULL)
			SELECT @spupdateFamilysqlStr = @spupdateFamilysqlStr + N', ForeignTravel = @ForeignTravel'


		SELECT @spupdateFamilysqlStr = @spupdateFamilysqlStr + N' WHERE FamilyID = @FamilyID'

		IF @DEBUG = 1
			SELECT @spupdateFamilysqlStr, 'Lastname' = @New_Last_Name, 'NumberofSmokers' = @New_Number_of_Smokers
				, 'PrimaryLanguageID' = @New_Primary_Language_ID, 'Pets' = @New_Pets, 'Petsinandout' = @New_Pets_in_and_out
				, 'PrimaryPropertyID' = @New_Primary_Property_ID, 'FrequentlyWashPets' = @New_Frequently_Wash_Pets
				, 'ForeignTravel' = @New_ForeignTravel
			
			IF (@New_Notes IS NOT NULL)
			BEGIN
				IF @DEBUG = 1
					SELECT 'EXEC [dbo].[usp_InsertFamilyNotes] @Family_ID = @Family_ID, @Notes = @New_Notes, @InsertedNotesID = @NotesID OUTPUT ' 
						, @Family_ID, @New_Notes 

				EXEC	[dbo].[usp_InsertFamilyNotes]
							@Family_ID = @Family_ID,
							@Notes = @New_Notes,
							@InsertedNotesID = @NotesID OUTPUT
			END
	
			-- update Family table
			EXEC [sp_executesql] @spupdateFamilysqlStr
				, N'@LastName VARCHAR(50), @NumberofSmokers tinyint, @PrimaryLanguageID tinyint
				, @Pets tinyint, @Petsinandout BIT, @PrimaryPropertyID int, @FrequentlyWashPets bit, @ForeignTravel bit, @FamilyID int'
				, @LastName = @New_Last_Name
				, @NumberofSmokers = @New_Number_of_Smokers
				, @PrimaryLanguageID = @New_Primary_Language_ID
				, @Pets = @New_Pets
				, @Petsinandout = @New_Pets_in_and_out
				, @PrimaryPropertyID = @New_Primary_Property_ID
				, @FrequentlyWashPets = @New_Frequently_Wash_Pets
				, @ForeignTravel = @New_ForeignTravel
				, @FamilyID = @Family_ID
	END TRY -- update Family
	BEGIN CATCH
		-- Call procedure to print error information.
		EXECUTE dbo.uspPrintError;

		-- Roll back any active or uncommittable transactions before
		-- inserting information in the ErrorLog.
		IF XACT_STATE() <> 0
		BEGIN
			ROLLBACK TRANSACTION;
		END

		EXECUTE dbo.uspLogError @ErrorLogID = @ErrorLogID OUTPUT;
		RETURN ERROR_NUMBER()
	END CATCH; 
END
GO
PRINT N'Altering [dbo].[usp_upPerson]...';


GO


-- =============================================
-- Author:		William Thier
-- Create date: 20130506
-- Description:	Stored Procedure to up new people records
-- =============================================
-- DROP PROCEDURE usp_upPerson
ALTER PROCEDURE [dbo].[usp_upPerson]  
	-- Add the parameters for the stored procedure here
	@Person_ID int = NULL,
	@New_FirstName varchar(50) = NULL,
	@New_MiddleName varchar(50) = NULL,
	@New_LastName varchar(50) = NULL, 
	@New_BirthDate date = NULL,
	@New_Gender char(1) = NULL,
	@New_StatusID smallint = NULL,
	@New_ForeignTravel bit = NULL,
	@New_OutofSite bit = NULL,
	@New_EatsForeignFood bit = NULL,
	@New_PatientID smallint = NULL,
	@New_RetestDate date = NULL,
	@New_Moved bit = NULL,
	@New_MovedDate date = NULL,
	@New_isClosed bit = 0,
	@New_isResolved bit = 0,
	@New_Notes varchar(3000) = NULL,
	@New_GuardianID int = NULL,
	@New_PersonCode smallint = NULL,
	@New_isSmoker bit = NULL,
	@New_isClient bit = NULL,
	@New_isNursing bit = NULL,
	@New_isPregnant bit = NULL,
	@DEBUG BIT = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @ErrorLogID int, @NotesID int, @spupdatePersonsqlStr NVARCHAR(4000);

    -- insert statements for procedure here
	BEGIN TRY
		-- Check if PersonID is valid, if not return
		IF NOT EXISTS (SELECT PersonID from Person where PersonID = @Person_ID)
		BEGIN
			RAISERROR(15000, -1,-1,'usp_upPerson');
		END
		
		-- BUILD update statement
		IF (@New_LastName IS NULL)
			SELECT @New_LastName = LastName from Person where PersonID = @Person_ID;
	
		SELECT @spupdatePersonsqlStr = N'update Person set Lastname = @LastName'

		IF (@New_FirstName IS NOT NULL)
			SELECT @spupdatePersonsqlStr = @spupdatePersonsqlStr + N', FirstName = @Firstname'

		IF (@New_MiddleName IS NOT NULL)
			SELECT @spupdatePersonsqlStr = @spupdatePersonsqlStr + N', MiddleName = @MiddleName'

		IF (@New_BirthDate IS NOT NULL)
			SELECT @spupdatePersonsqlStr = @spupdatePersonsqlStr + N', BirthDate = @BirthDate'

		IF (@New_Gender IS NOT NULL)
			SELECT @spupdatePersonsqlStr = @spupdatePersonsqlStr + N', Gender = @Gender'

		IF (@New_StatusID IS NOT NULL)
			SELECT @spupdatePersonsqlStr = @spupdatePersonsqlStr + N', StatusID = @StatusID'

		IF (@New_ForeignTravel IS NOT NULL)
			SELECT @spupdatePersonsqlStr = @spupdatePersonsqlStr + N', ForeignTravel = @ForeignTravel'

		IF (@New_OutofSite IS NOT NULL)
			SELECT @spupdatePersonsqlStr = @spupdatePersonsqlStr + N', OutofSite = @OutofSite'

		IF (@New_EatsForeignFood IS NOT NULL)
			SELECT @spupdatePersonsqlStr = @spupdatePersonsqlStr + N', EatsForeignFood = @EatsForeignFood'

		IF (@New_PatientID IS NOT NULL)
			SELECT @spupdatePersonsqlStr = @spupdatePersonsqlStr + N', PatientID = @PatientID'

		IF (@New_RetestDate IS NOT NULL)
			SELECT @spupdatePersonsqlStr = @spupdatePersonsqlStr + N', RetestDate = @RetestDate'

		IF (@New_Moved IS NOT NULL)
			SELECT @spupdatePersonsqlStr = @spupdatePersonsqlStr + N', Moved = @Moved'

		IF (@New_MovedDate IS NOT NULL)
			SELECT @spupdatePersonsqlStr = @spupdatePersonsqlStr + N', MovedDate = @MovedDate'

		IF (@New_isClosed IS NOT NULL)
			SELECT @spupdatePersonsqlStr = @spupdatePersonsqlStr + N', isClosed = @isClosed'

		IF (@New_isResolved IS NOT NULL)
			SELECT @spupdatePersonsqlStr = @spupdatePersonsqlStr + N', isResolved = @isResolved'
			
		IF (@New_GuardianID IS NOT NULL)
			SELECT @spupdatePersonsqlStr = @spupdatePersonsqlStr + N', GuardianID = @GuardianID'
			
		IF (@New_PersonCode IS NOT NULL)
			SELECT @spupdatePersonsqlStr = @spupdatePersonsqlStr + N', PersonCode = @PersonCode'

		IF (@New_isSmoker IS NOT NULL)
			SELECT @spupdatePersonsqlStr = @spupdatePersonsqlStr + N', isSmoker = @isSmoker'

		IF (@New_isClient IS NOT NULL)
			SELECT @spupdatePersonsqlStr = @spupdatePersonsqlStr + N', isClient = @isClient'

		IF (@New_isNursing IS NOT NULL)
			SELECT @spupdatePersonsqlStr = @spupdatePersonsqlStr + N', isNursing = @isNursing'

		IF (@New_isPregnant IS NOT NULL)
			SELECT @spupdatePersonsqlStr = @spupdatePersonsqlStr + N', isPregnant = @isPregnant'

		-- make sure to only update record for specified person
		SELECT @spupdatePersonsqlStr = @spupdatePersonsqlStr + N' WHERE PersonID = @PersonID'

		IF (@DEBUG = 1)
			SELECT @spupdatePersonsqlStr, LastName = @New_LastName, FirstName = @New_FirstName, MiddleName = @New_MiddleName
					, BirthDate = @New_BirthDate, Gender = @New_Gender, StatusID = @New_StatusID, ForeignTravel = @New_ForeignTravel
					, OutofSite = @New_OutofSite, EatsForeignFood = @New_EatsForeignFood, PatientID = @New_PatientID, RetestDate = @New_RetestDate
					, Moved = @New_Moved, MovedDate = @New_MovedDate, isClosed = @New_isClosed, isResolved = @New_isResolved
					, GuardianID = @New_GuardianID, PersonCode = @New_PersonCode, isSmoker = @New_isSmoker, isClient = @New_isClient
					, isNursing = @New_isNursing, isPregnant = @New_isPregnant, PersonID = @Person_ID

		EXEC [sp_executesql] @spupdatePersonsqlStr
				, N'@LastName VARCHAR(50), @FirstName VARCHAR(50), @MiddleName VARCHAR(50), @BirthDate date, @Gender char(1)
				, @StatusID smallint, @ForeignTravel BIT, @OutofSite bit, @EatsForeignFood bit, @PatientID smallint, @RetestDate date
				, @Moved bit, @MovedDate date, @isClosed bit, @isResolved bit, @GuardianID int, @PersonCode smallint, @isSmoker bit
				, @isClient bit, @isNursing bit, @isPregnant bit, @PersonID int'
				, @LastName = @New_LastName
				, @FirstName = @New_FirstName
				, @MiddleName = @New_MiddleName
				, @BirthDate = @New_BirthDate
				, @Gender = @New_Gender
				, @StatusID = @New_StatusID
				, @ForeignTravel = @New_ForeignTravel
				, @OutofSite = @New_OutofSite
				, @EatsForeignFood = @New_EatsForeignFood
				, @PatientID = @New_PatientID
				, @RetestDate = @New_RetestDate
				, @Moved = @New_Moved
				, @MovedDate = @New_MovedDate
				, @isClosed = @New_isClosed
				, @isResolved = @New_isResolved
				, @GuardianID = @New_GuardianID
				, @PersonCode = @New_PersonCode
				, @isSmoker = @New_isSmoker
				, @isClient = @New_isClient
				, @isNursing = @New_isNursing
				, @isPregnant = @New_isPregnant
				, @PersonID = @Person_ID

			IF (@New_Notes IS NOT NULL)
			EXEC	[dbo].[usp_InsertPersonNotes]
								@Person_ID = @Person_ID,
								@Notes = @New_Notes,
								@InsertedNotesID = @NotesID OUTPUT
	END TRY
	BEGIN CATCH
		-- Call procedure to print error information.
		EXECUTE dbo.uspPrintError;

		-- Roll back any active or uncommittable transactions before
		-- inserting information in the ErrorLog.
		IF XACT_STATE() <> 0
		BEGIN
			ROLLBACK TRANSACTION;
		END

		EXECUTE dbo.uspLogError @ErrorLogID = @ErrorLogID OUTPUT;
		RETURN ERROR_NUMBER()
	END CATCH;
END
GO
PRINT N'Creating [dbo].[usp_SlPersonNotes]...';


GO
-- =============================================
-- Author:		Liam Thier
-- Create date: 20150215
-- Description:	stored procedure to list 
--              person and their ethnicities
-- =============================================
CREATE PROCEDURE [dbo].[usp_SlPersonNotes]
	-- Add the parameters for the stored procedure here
	@PersonID int = NULL,
	@DEBUG BIT = 0

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	DECLARE @spexecuteSQLStr NVARCHAR(4000)
			, @Recompile  BIT = 1, @ErrorLogID int;
	
	--IF (@FamilyID IS NULL)
	--BEGIN
	--	RAISERROR ('You must supply at least one parameter.', 11, -1);
	--	RETURN;
	--END;
	SELECT @spexecuteSQLStr =
		N'select P.PersonID,LastName,FirstName, PN.Notes,P.ModifiedDate from Person AS P
			LEFT OUTER JOIN PersonNotes AS PN on P.PersonID = PN.PErsonID
			where Notes is not null';

	IF (@PersonID IS NOT NULL) 
		SELECT @spexecuteSQLStr = @spexecuteSQLStr
			+ N' AND [P].[PersonID] = @PersonID';

	SELECT @spexecuteSQLStr = @spexecuteSQLStr
		+ N' order by [P].[lastname],[P].[Personid]';


	IF (@PersonID IS NULL) 
		SET @Recompile = 0;
	
	IF @Recompile = 1
		SELECT @spexecuteSQLStr = @spexecuteSQLStr + N' OPTION(RECOMPILE)';

	BEGIN TRY   
		IF (@DEBUG = 1) 
			SELECT @spexecuteSQLStr, 'PersonID' = @PersonID;
			 
		EXEC [sp_executesql] @spexecuteSQLStr
			, N'@PersonID int'
			, @PersonID = @PersonID;
	END TRY
			BEGIN CATCH
			-- Call procedure to print error information.
			EXECUTE dbo.uspPrintError;

			-- Roll back any active or uncommittable transactions before
			-- inserting information in the ErrorLog.
			IF XACT_STATE() <> 0
			BEGIN
				ROLLBACK TRANSACTION;
			END

			EXECUTE dbo.uspLogError @ErrorLogID = @ErrorLogID OUTPUT;
			RETURN ERROR_NUMBER()
		END CATCH;
END
GO
PRINT N'Creating [dbo].[usp_SlPersontoEthnicity]...';


GO
-- =============================================
-- Author:		Liam Thier
-- Create date: 20150215
-- Description:	stored procedure to list 
--              person and their ethnicities
-- =============================================
CREATE PROCEDURE [dbo].[usp_SlPersontoEthnicity]
	-- Add the parameters for the stored procedure here
	@PersonID int = NULL,
	@DEBUG BIT = 0

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	DECLARE @spexecuteSQLStr NVARCHAR(4000)
			, @Recompile  BIT = 1, @ErrorLogID int;
	
	--IF (@FamilyID IS NULL)
	--BEGIN
	--	RAISERROR ('You must supply at least one parameter.', 11, -1);
	--	RETURN;
	--END;
	SELECT @spexecuteSQLStr =
		N'select P.PersonID,LastName,FirstName,E.Ethnicity from Person AS P
			LEFT OUTER JOIN PersontoEthnicity AS P2E on P.PersonID = P2E.PErsonID
			LEFT OUTER JOIN Ethnicity AS E on P2E.EthnicityID = E.EthnicityID 
			WHERE 1 = 1';

	IF (@PersonID IS NOT NULL) 
		SELECT @spexecuteSQLStr = @spexecuteSQLStr
			+ N' AND [P].[PersonID] = @PersonID';

	SELECT @spexecuteSQLStr = @spexecuteSQLStr
		+ N' order by [P].[lastname],[P].[Personid]';


	IF (@PersonID IS NULL) 
		SET @Recompile = 0;
	
	IF @Recompile = 1
		SELECT @spexecuteSQLStr = @spexecuteSQLStr + N' OPTION(RECOMPILE)';

	BEGIN TRY   
		IF (@DEBUG = 1) 
			SELECT @spexecuteSQLStr, 'PersonID' = @PersonID;
			 
		EXEC [sp_executesql] @spexecuteSQLStr
			, N'@PersonID int'
			, @PersonID = @PersonID;
	END TRY
			BEGIN CATCH
			-- Call procedure to print error information.
			EXECUTE dbo.uspPrintError;

			-- Roll back any active or uncommittable transactions before
			-- inserting information in the ErrorLog.
			IF XACT_STATE() <> 0
			BEGIN
				ROLLBACK TRANSACTION;
			END

			EXECUTE dbo.uspLogError @ErrorLogID = @ErrorLogID OUTPUT;
			RETURN ERROR_NUMBER()
		END CATCH;
END
GO
PRINT N'Creating [dbo].[usp_SlPersontoLanguage]...';


GO
-- =============================================
-- Author:		Liam Thier
-- Create date: 20150215
-- Description:	stored procedure to list 
--              person and their languages
-- =============================================
CREATE PROCEDURE [dbo].[usp_SlPersontoLanguage]
	-- Add the parameters for the stored procedure here
	@PersonID int = NULL,
	@DEBUG BIT = 0

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	DECLARE @spexecuteSQLStr NVARCHAR(4000)
			, @Recompile  BIT = 1, @ErrorLogID int;
	
	--IF (@FamilyID IS NULL)
	--BEGIN
	--	RAISERROR ('You must supply at least one parameter.', 11, -1);
	--	RETURN;
	--END;
	SELECT @spexecuteSQLStr =
		N'select [P].PersonID,LastName,FirstName, L.LanguageName from Person AS P
			LEFT OUTER JOIN PersontoLanguage AS P2L on P.PersonID = P2L.PErsonID
			LEFT OUTER JOIN Language AS L on P2L.LanguageID = L.LanguageID 
			WHERE 1 = 1';

	IF (@PersonID IS NOT NULL) 
		SELECT @spexecuteSQLStr = @spexecuteSQLStr
			+ N' AND [P].[PersonID] = @PersonID';

	SELECT @spexecuteSQLStr = @spexecuteSQLStr
		+ N' order by [P].[lastname],[P].[Personid]';


	IF (@PersonID IS NULL) 
		SET @Recompile = 0;
	
	IF @Recompile = 1
		SELECT @spexecuteSQLStr = @spexecuteSQLStr + N' OPTION(RECOMPILE)';

	BEGIN TRY   
		IF (@DEBUG = 1) 
			SELECT @spexecuteSQLStr, 'PersonID' = @PersonID;
			 
		EXEC [sp_executesql] @spexecuteSQLStr
			, N'@PersonID int'
			, @PersonID = @PersonID;
	END TRY
			BEGIN CATCH
			-- Call procedure to print error information.
			EXECUTE dbo.uspPrintError;

			-- Roll back any active or uncommittable transactions before
			-- inserting information in the ErrorLog.
			IF XACT_STATE() <> 0
			BEGIN
				ROLLBACK TRANSACTION;
			END

			EXECUTE dbo.uspLogError @ErrorLogID = @ErrorLogID OUTPUT;
			RETURN ERROR_NUMBER()
		END CATCH;
END
GO
PRINT N'Creating [dbo].[usp_upFamilyWebScreen]...';


GO

-- =============================================
-- Author:		William Thier
-- Create date: 20150329
-- Description:	Stored Procedure to update Family 
--              web screen information
-- =============================================

CREATE PROCEDURE [dbo].[usp_upFamilyWebScreen]  
	-- Add the parameters for the stored procedure here
	@Family_ID int = NULL,
	@New_Last_Name varchar(50) = NULL,
	@PropertyID int = NULL,
	@New_ConstructionType int = NULL,
	@New_AreaID int = NULL,
	@New_isinHistoricDistrict bit = NULL,
	@New_isRemodeled bit = NULL, 
	@New_RemodelDate date = NULL,
	@New_isinCityLimits bit = NULL,
	@New_Address_Line1 varchar(100) = NULL,
	@New_Address_Line2 varchar(100) = NULL,
	@New_CityName varchar(50) = NULL,
	@New_County varchar(50) = NULL,
	@New_StateAbbr char(2) = NULL,
	@New_ZipCode varchar(10) = NULL,
	@New_Year_Built date = NULL,
	@New_Owner_id int = NULL,
	@New_is_Owner_Occupied bit = NULL,
	@New_ReplacedPipesFaucets bit = NULL,
	@New_TotalRemediationCosts money = NULL,
	@New_PropertyNotes varchar(3000) = NULL,
	@New_is_Residential bit = NULL,
	@New_isCurrentlyBeingRemodeled bit = NULL,
	@New_has_Peeling_Chipping_Patin bit = NULL,
	@New_is_Rental bit = NULL,
	@New_HomePhone bigint = NULL,
	@New_WorkPhone bigint = NULL,
	@New_Number_of_Smokers tinyint = NULL,
	@New_Primary_Language_ID tinyint = 1,
	@New_Family_Notes varchar(3000) = NULL,
	@New_Pets tinyint = NULL,
	@New_Frequently_Wash_Pets bit = NULL,
	@New_Pets_in_and_out bit = NULL,
	@New_Primary_Property_ID int = NULL,
	@New_ForeignTravel bit = NULL,
	@DEBUG BIT = 0

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	DECLARE @ErrorLogID int, @Update_Family_return_value int
			, @Update_Property_return_value int
			, @NotesID INT, @Recompile BIT = 1;
	
	BEGIN TRY -- update Family information
		-- Exit if family and property aren't specified
		IF (@Family_ID IS NULL AND @PropertyID IS NULL)
		BEGIN
			RAISERROR ('Family and Property must be supplied', 11, -1);
			RETURN;
		END;
		
		EXEC	@Update_Family_return_value = [dbo].[usp_upFamily]
				@Family_ID = @Family_ID,
				@New_Last_Name = @New_Last_Name,
				@New_Number_of_Smokers = @New_Number_of_Smokers,
				@New_Primary_Language_ID = @New_Primary_Language_ID,
				@New_Notes = @New_Family_Notes,
				@New_Pets = @New_Pets,
				@New_Frequently_Wash_Pets = @New_Frequently_Wash_Pets,
				@New_Pets_in_and_out = @New_Pets_in_and_out,
				@New_Primary_Property_ID = @New_Primary_Property_ID,
				@New_ForeignTravel = @New_ForeignTravel,
				@DEBUG = @DEBUG;

/*
		EXEC @Update_Property_return_value = [dbo].[usp_upProperty]
			@PropertyID = @PropertyID,
			@New_ConstructionTypeID = @New_ConstructionType,
			@New_AreaID = @New_AreaID,
			@New_isinHistoricDistrict = @New_isinHistoricDistrict,
			@New_isRemodeled = @New_isRemodeled,
			@New_RemodelDate = @New_RemodelDate,
			@New_isinCityLimits = @New_isinCityLimits,
			@New_AddressLine1 = @New_Address_Line1,
			@New_AddressLine2 = @New_Address_Line2,
			@New_City = @New_CityName,
			@New_State = @New_StateAbbr,
			@New_Zipcode = @New_ZipCode,
			@New_YearBuilt = @New_Year_Built,
			@New_Ownerid = @New_Owner_id,
			@New_isOwnerOccuppied = @New_is_Owner_Occupied,
			@New_ReplacedPipesFaucets = @New_ReplacedPipesFaucets,
			@New_TotalRemediationCosts = @New_TotalRemediationCosts,
			@New_PropertyNotes = @New_PropertyNotes,
			@New_isResidential = @New_is_Residential,
			@New_isCurrentlyBeingRemodeled = @New_isCurrentlyBeingRemodeled,
			@New_hasPeelingChippingPaint = @New_has_Peeling_Chipping_Patin,
			@New_County = @New_County,
			@New_isRental = @New_is_Rental,
			@DEBUG = @DEBUG
			*/
	END TRY -- update Family
	BEGIN CATCH
		-- Call procedure to print error information.
		EXECUTE dbo.uspPrintError;

		-- Roll back any active or uncommittable transactions before
		-- inserting information in the ErrorLog.
		IF XACT_STATE() <> 0
		BEGIN
			ROLLBACK TRANSACTION;
		END

		EXECUTE dbo.uspLogError @ErrorLogID = @ErrorLogID OUTPUT;
		RETURN ERROR_NUMBER()
	END CATCH; 
END
GO
PRINT N'Creating [dbo].[usp_upOccupation]...';


GO



-- =============================================
-- Author:		William Thier
-- Create date: 20150327
-- Description:	Stored Procedure to update occupation records
-- =============================================
-- DROP PROCEDURE usp_upOccupation
CREATE PROCEDURE [dbo].[usp_upOccupation] 
	-- Add the parameters for the stored procedure here
	@PersonID int = NULL,
	@OccupationID tinyint = NULL,
	@Occupation_StartDate date = NULL,
	@Occupation_EndDate date = NULL,
	@DEBUG BIT = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @ErrorLogID int, @ErrorMessage NVARCHAR(4000), @Update bit, @spupdateOccupationsqlStr NVARCHAR(4000);

	-- Assume there is nothing to update
	SET @Update = 0;

	-- insert statements for procedure here
	BEGIN TRY
		IF (@PersonID IS NULL OR @OccupationID IS NULL)
		BEGIN
			RAISERROR('Occupation and Person must be specified',11,50000);
			RETURN;
		END

		IF (NOT EXISTS (SELECT PersonID from PersontoOccupation where PersonID = @PersonID AND OccupationID = @OccupationID))
		BEGIN
			SELECT @ErrorMessage = 'Secified person: ' + cast(@PersonID as varchar) + ' is not associated with occupation: ' 
				+ cast(@OccupationID as varchar) +'. Try creating the assocation with usp_InsertPersontoOccupation';
			RAISERROR(@ErrorMessage,8,50000);
			RETURN;
		END
		
		-- BUILD update statement
		SELECT @spupdateOccupationsqlStr = N'update PersontoOccupation Set PersonID = @PersonID'
		
		IF (@Occupation_StartDate IS NOT NULL)
		BEGIN
			SET @Update = 1;
			SELECT @spupdateOccupationsqlStr = @spupdateOccupationsqlStr + ', StartDate = @StartDate'
		END

		IF (@Occupation_StartDate IS NOT NULL)
		BEGIN
			SET @Update = 1;
			SELECT @spupdateOccupationsqlStr = @spupdateOccupationsqlStr + ', ENDDate = @ENDDate'
		END

		IF (@Update = 1)
		BEGIN
			SELECT @spupdateOccupationsqlStr = @spupdateOccupationsqlStr + ' WHERE PersonID = @PersonID and OccupationID = @OccupationID'

			IF (@DEBUG = 1)
				SELECT @spupdateOccupationsqlStr, 'StartDate' = @Occupation_StartDate, 'EndDate' = @Occupation_EndDate,
					'PersonID' = @PersonID, 'OccupationID' = @OccupationID

			EXEC [sp_executesql] @spupdateOccupationsqlStr
					, N'@OccupationID tinyint, @PersonID int, @StartDate date, @EndDate date'
					, @OccupationID = @OccupationID
					, @PersonID = @PersonID
					, @StartDate = @Occupation_StartDate
					, @EndDate = @Occupation_EndDate
		END
	END TRY
	BEGIN CATCH
		-- Call procedure to print error information.
		EXECUTE dbo.uspPrintError;

		-- Roll back any active or uncommittable transactions before
		-- inserting information in the ErrorLog.
		IF XACT_STATE() <> 0
		BEGIN
			ROLLBACK TRANSACTION;
		END

		EXECUTE dbo.uspLogError @ErrorLogID = @ErrorLogID OUTPUT;
		RETURN ERROR_NUMBER()
	END CATCH;
END
GO
PRINT N'Creating [dbo].[usp_upProperty]...';


GO


-- =============================================
-- Author:		William Thier
-- Create date: 20140817
-- Description:	Stored Procedure to update property records
-- =============================================

CREATE PROCEDURE [dbo].[usp_upProperty]   -- usp_upProperty 
	-- Add the parameters for the stored procedure here
	@PropertyID int = NULL,
	@New_ConstructionTypeID tinyint = NULL,
	@New_AreaID int = NULL,
	@New_isinHistoricDistrict bit = NULL, 
	@New_isRemodeled bit = NULL,
	@New_RemodelDate date = NULL,
	@New_isinCityLimits bit = NULL,
	-- @StreetNumber smallint = NULL,
	@New_AddressLine1 varchar(100) = NULL,
	-- @StreetSuffix varchar(20) = NULL,
	@New_AddressLine2 varchar(100) = NULL,
	@New_City varchar(50) = NULL,
	@New_State char(2) = NULL,
	@New_Zipcode varchar(12) = NULL,
	@New_YearBuilt date = NULL,
	@New_Ownerid int = NULL,
	@New_isOwnerOccuppied bit = NULL,
	@New_ReplacedPipesFaucets tinyint = 0,
	@New_TotalRemediationCosts money = NULL,
	@New_PropertyNotes varchar(3000) = NULL,
	@New_isResidential bit = NULL,
	@New_isCurrentlyBeingRemodeled bit = NULL,
	@New_hasPeelingChippingPaint bit = NULL,
	@New_County varchar(50) = NULL,
	@New_isRental bit = NULL,
	@DEBUG bit = 0

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @ErrorLogID int, @NotesID int, @spupdatePropertysqlStr nvarchar(4000);
    -- Insert statements for procedure here
	BEGIN TRY
		if (@PropertyID iS NULL)
		BEGIN
			DECLARE @ErrorString VARCHAR(3000);
			SET @ErrorString = 'Property must be specified';
			RAISERROR (@ErrorString, 11, -1);
			RETURN;
		END

		-- BUILD update statement
		IF (@New_isinHistoricDistrict IS NULL)
			SELECT @New_isinHistoricDistrict = isinHistoricDistrict from Property where PropertyID = @PropertyID;
	
		SELECT @spupdatePropertysqlStr = N'update Property set isinHistoricDistrict = @isinHistoricDistrict'

		IF (@New_ConstructionTypeID IS NOT NULL)
			SELECT @spupdatePropertysqlStr = @spupdatePropertysqlStr + N', ConstructionTypeID = @ConstructionTypeID'

		IF (@New_AreaID IS NOT NULL)
			SELECT @spupdatePropertysqlStr = @spupdatePropertysqlStr + N', AreaID = @AreaID'

		IF (@New_isRemodeled IS NOT NULL)
			SELECT @spupdatePropertysqlStr = @spupdatePropertysqlStr + N', isRemodeled = @isRemodeled'

		IF (@New_RemodelDate IS NOT NULL)
			SELECT @spupdatePropertysqlStr = @spupdatePropertysqlStr + N', RemodelDate = @RemodelDate'

		IF (@New_isinCityLimits IS NOT NULL)
			SELECT @spupdatePropertysqlStr = @spupdatePropertysqlStr + N', isinCityLimits = @isinCityLimits'

		IF (@New_AddressLine1 IS NOT NULL)
			SELECT @spupdatePropertysqlStr = @spupdatePropertysqlStr + N', AddressLine1 = @AddressLine1'

		IF (@New_AddressLine2 IS NOT NULL)
			SELECT @spupdatePropertysqlStr = @spupdatePropertysqlStr + N', AddressLine2 = @AddressLine2'	
			
		IF (@New_City IS NOT NULL)
			SELECT @spupdatePropertysqlStr = @spupdatePropertysqlStr + N', City = @City'

		IF (@New_State IS NOT NULL)
			SELECT @spupdatePropertysqlStr = @spupdatePropertysqlStr + N', State = @State'

		IF (@New_Zipcode IS NOT NULL)
			SELECT @spupdatePropertysqlStr = @spupdatePropertysqlStr + N', ZipCode = @ZipCode'

		IF (@New_Ownerid IS NOT NULL)
			SELECT @spupdatePropertysqlStr = @spupdatePropertysqlStr + N', OwnerID = @OwnerID'
			
		IF (@New_isOwnerOccuppied IS NOT NULL)
			SELECT @spupdatePropertysqlStr = @spupdatePropertysqlStr + N', isOwnerOccuppied = @isOwnerOccuppied'
			
		IF (@New_ReplacedPipesFaucets IS NOT NULL)
			SELECT @spupdatePropertysqlStr = @spupdatePropertysqlStr + N', ReplacedPipesFaucets = @ReplacedPipesFaucets'
			
		IF (@New_TotalRemediationCosts IS NOT NULL)
			SELECT @spupdatePropertysqlStr = @spupdatePropertysqlStr + N', TotalRemediationCosts = @TotalRemediationCosts'
			
		IF (@New_isResidential IS NOT NULL)
			SELECT @spupdatePropertysqlStr = @spupdatePropertysqlStr + N', isResidential = @isResidential'
			
		IF (@New_isCurrentlyBeingRemodeled IS NOT NULL)
			SELECT @spupdatePropertysqlStr = @spupdatePropertysqlStr + N', isCurrentlyBeingRemodeled = @isCurrentlyBeingRemodeled'
			
		IF (@New_hasPeelingChippingPaint IS NOT NULL)
			SELECT @spupdatePropertysqlStr = @spupdatePropertysqlStr + N', hasPeelingChippingPaint = @hasPeelingChippingPaint'
			
		IF (@New_County IS NOT NULL)
			SELECT @spupdatePropertysqlStr = @spupdatePropertysqlStr + N', County = @County'
			
		IF (@New_isRental IS NOT NULL)
			SELECT @spupdatePropertysqlStr = @spupdatePropertysqlStr + N', isRental = @isRental'
			
		IF (@New_YearBuilt IS NOT NULL)
			SELECT @spupdatePropertysqlStr = @spupdatePropertysqlStr + N', YearBuilt = @YearBuilt'

		SELECT @spupdatePropertysqlStr = @spupdatePropertysqlStr + N' WHERE PropertyID = @PropertyID'

		-- update Family table
		IF @DEBUG = 1
			SELECT @spupdatePropertysqlStr, @New_ConstructionTypeID, @New_AreaID, @New_isinHistoricDistrict, @New_isRemodeled
					, @New_RemodelDate, @New_isinCityLimits, @New_AddressLine1, @New_AddressLine2, @New_City, @New_State
					, @New_Zipcode, @New_Ownerid, @New_isOwnerOccuppied, @New_ReplacedPipesFaucets, @New_PropertyNotes, @New_TotalRemediationCosts
					, @New_isResidential, @New_isCurrentlyBeingRemodeled, @New_hasPeelingChippingPaint, @New_County
					, @New_isRental, @New_YearBuilt, @PropertyID

		EXEC [sp_executesql] @spupdatePropertysqlStr 
			, N'@ConstructionTypeID tinyint, @AreaID int, @isinHistoricDistrict bit, @isRemodeled bit, @RemodelDate date
			, @isinCityLimits BIT, @AddressLine1 varchar(100), @AddressLine2 varchar(100), @City varchar(50), @State char(2)
			, @Zipcode varchar(12), @OwnerID int, @isOwnerOccuppied bit, @ReplacedPipesFaucets tinyint, @TotalRemediationCosts money
			, @isResidential bit, @isCurrentlyBeingRemodeled bit, @hasPeelingChippingPaint bit
			, @County varchar(50), @isRental bit, @YearBuilt date, @PropertyID int'
			, @ConstructionTypeID = @New_ConstructionTypeID
			, @AreaID = @New_AreaID
			, @isinHistoricDistrict = @New_isinHistoricDistrict
			, @isRemodeled = @New_isRemodeled
			, @RemodelDate = @New_RemodelDate
			, @isinCityLimits = @New_isinCityLimits
			, @AddressLine1 = @New_AddressLine1
			, @AddressLine2 = @New_AddressLine2
			, @City = @New_City
			, @State = @New_State
			, @Zipcode = @New_Zipcode
			, @OwnerID = @New_Ownerid
			, @isOwnerOccuppied = @New_isOwnerOccuppied
			, @ReplacedPipesFaucets = @New_ReplacedPipesFaucets
			, @TotalRemediationCosts = @New_TotalRemediationCosts
			, @isResidential = @New_isResidential
			, @isCurrentlyBeingRemodeled = @New_isCurrentlyBeingRemodeled
			, @hasPeelingChippingPaint = @New_hasPeelingChippingPaint
			, @County = @New_County
			, @isRental = @New_isRental
			, @YearBuilt = @New_YearBuilt
			, @PropertyID = @PropertyID

		IF (@New_PropertyNotes IS NOT NULL)
		BEGIN
			IF @DEBUG = 1
				SELECT 'EXEC [dbo].[usp_InsertPropertyNotes] @Property_ID = @Property_ID, @Notes = @New_PropertyNotes, @InsertedNotesID = @NotesID OUTPUT ' 
					, @PropertyID, @New_PropertyNotes

				EXEC	[dbo].[usp_InsertPropertyNotes]
						@Property_ID = @PropertyID,
						@Notes = @New_PropertyNotes,
						@InsertedNotesID = @NotesID OUTPUT
		END

	END TRY
	BEGIN CATCH
		-- Call procedure to print error information.
		EXECUTE dbo.uspPrintError;

		-- Roll back any active or uncommittable transactions before
		-- inserting information in the ErrorLog.
		IF XACT_STATE() <> 0
		BEGIN
			ROLLBACK TRANSACTION;
		END

		EXECUTE dbo.uspLogError @ErrorLogID = @ErrorLogID OUTPUT;
		RETURN ERROR_NUMBER()
	END CATCH;
END
GO
PRINT N'Altering [dbo].[usp_InsertNewClientWebScreen]...';


GO
-- =============================================
-- Author:		Liam Thier
-- Create date: 20141115
-- Description:	stored procedure to insert data from the Add a new client web page
-- =============================================
ALTER PROCEDURE [dbo].[usp_InsertNewClientWebScreen]
	-- Add the parameters for the stored procedure here
	@Family_ID int = NULL, 
	@First_Name varchar(50) = NULL,
	@Middle_Name varchar(50) = NULL,
	@Last_Name varchar(50) = NULL,
	@Birth_Date date = NULL,
	@Gender_ char(1) = NULL,
	@Language_ID tinyint = NULL,
	@Ethnicity_ID int = NULL,
	@Moved_ bit = NULL,
	@Travel bit = NULL, --ForeignTravel  REMOVE AFTE MOVING TO ADDNewFamilyWebScreen
	@Travel_Notes varchar(3000) = NULL,  -- REMOVE AFTE MOVING TO ADDNewFamilyWebScreen
	@Out_of_Site bit = NULL, 
	@Hobby_ID smallint = NULL,
	@Hobby_Notes varchar(3000) = NULL,
	@Child_Notes varchar(3000) = NULL,
	@Release_Notes varchar(3000) = NULL,
	@is_Smoker bit = NULL,
	@Occupation_ID smallint = NULL,
	@Occupation_Start_Date date = NULL,
	@OverrideDuplicatePerson bit = 0,
	@is_Client bit = 1,
	@is_Nursing bit = NULL,
	@is_Pregnant bit = NULL,
	@ClientID int OUTPUT

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	BEGIN
		DECLARE @ErrorLogID int,
				@Ethnicity_return_value int,
				@PersontoFamily_return_value int,
				@PersontoLanguage_return_value int,
				@PersontoHobby_return_value int,
				@PersontoOccupation_return_value int,
				@PersontoEthnicity_return_value int;
	
		-- If no family ID was passed in exit
		IF (@Family_ID IS NULL)
		BEGIN
			RAISERROR ('Family name must be supplied', 11, -1);
			RETURN;
		END;

		-- If the family doesn't exist, return an error
		IF ((select FamilyID from family where FamilyID = @Family_ID) is NULL)
		BEGIN
			DECLARE @ErrorString VARCHAR(3000);
			SET @ErrorString = 'Unable to associate non-existent family. Family does not exist.'
			RAISERROR (@ErrorString, 11, -1);
			RETURN;
		END
	
		if (@Last_Name is null)
		BEGIN
			select @Last_Name = Lastname from Family where FamilyID = @Family_ID
		END

		BEGIN TRY  -- insert new person
			EXEC	[dbo].[usp_InsertPerson]
					@FirstName = @First_Name,
					@MiddleName = @Middle_Name,
					@LastName = @Last_Name,
					@BirthDate = @Birth_Date,
					@Gender = @Gender_,
					@Moved = @Moved_,
					@ForeignTravel = @Travel,
					@OutofSite = @Out_of_Site,
					@New_Notes = @Child_Notes,
					@isSmoker = @is_Smoker,
					@isClient = @is_Client,
					@isNursing = @is_Nursing,
					@isPregnant = @is_Pregnant,
					@OverrideDuplicate = @OverrideDuplicatePerson,
					@PID = @CLientID OUTPUT;

			-- Associate person to Ethnicity
			IF (@Ethnicity_ID IS NOT NULL)
			EXEC	@Ethnicity_return_value = [dbo].[usp_InsertPersontoEthnicity]
					@PersonID = @ClientID,
					@EthnicityID = @Ethnicity_ID

			-- Associate person to family
			if (@Family_ID is not NULL)
			EXEC	@PersontoFamily_return_value = usp_InsertPersontoFamily
					@PersonID = @ClientID, @FamilyID = @Family_ID, @OUTPUT = @PersontoFamily_return_value OUTPUT;

			-- Associate person to language
			if (@Language_ID is not NULL)
			EXEC 	@PersontoLanguage_return_value = usp_InsertPersontoLanguage
					@LanguageID = @Language_ID, @PersonID = @ClientID, @isPrimaryLanguage = 1;

			-- associate person to Hobby
			if (@Hobby_ID is not NULL)
			EXEC	@PersontoHobby_return_value = usp_InsertPersontoHobby
					@HobbyID = @Hobby_ID, @PersonID = @ClientID;

			-- associate person to occupation
			if (@Occupation_ID is not NULL)
			EXEC	@PersontoOccupation_return_value = [dbo].[usp_InsertPersontoOccupation]
					@PersonID = @ClientID,
					@OccupationID = @Occupation_ID
		END TRY
		BEGIN CATCH -- insert person
			-- Call procedure to print error information.
			EXECUTE dbo.uspPrintError;

			-- Roll back any active or uncommittable transactions before
			-- inserting information in the ErrorLog.
			IF XACT_STATE() <> 0
			BEGIN
				ROLLBACK TRANSACTION;
			END

			EXECUTE dbo.uspLogError @ErrorLogID = @ErrorLogID OUTPUT;
			RETURN ERROR_NUMBER()
		END CATCH; -- insert new person
	END

	IF (@Family_ID is not NULL AND @PersontoFamily_return_value <> 0) 
	BEGIN
		RAISERROR ('Error associating person to family', 11, -1);
		RETURN;
	END
	
	IF (@Hobby_ID is not NULL AND @PersontoHobby_return_value <> 0)
	BEGIN
		RAISERROR ('Error associating person to Hobby', 11, -1);
		RETURN;
	END
	
	IF (@Language_ID is not NULL AND @PersontoLanguage_return_value <> 0) 
	BEGIN
		RAISERROR ('Error associating person to language', 11, -1);
		RETURN;
	END
	
	IF (@Occupation_ID is not NULL and @PersontoOccupation_return_value <> 0)
	BEGIN
		RAISERROR ('Error associating person to occupation', 11, -1);
		RETURN;
	END
END
GO
PRINT N'Creating [dbo].[usp_upClientWebScreen]...';


GO


-- =============================================
-- Author:		Liam Thier
-- Create date: 20150325
-- Description:	stored procedure to update data 
--              from the Add a new client web page
-- =============================================
CREATE PROCEDURE [dbo].[usp_upClientWebScreen]
	-- Add the parameters for the stored procedure here
	@Family_ID int = NULL,
	@Person_ID int = NULL,
	@New_FirstName varchar(50) = NULL,
	@New_MiddleName varchar(50) = NULL,
	@New_LastName varchar(50) = NULL, 
	@New_BirthDate date = NULL,
	@New_Gender char(1) = NULL,
	@New_StatusID smallint = NULL,
	@New_ForeignTravel bit = NULL,
	@New_OutofSite bit = NULL,
	@New_EatsForeignFood bit = NULL,
	@New_PatientID smallint = NULL,
	@New_RetestDate date = NULL,
	@New_Moved bit = NULL,
	@New_MovedDate date = NULL,
	@New_isClosed bit = 0,
	@New_isResolved bit = 0,
	@New_Notes varchar(3000) = NULL,
	@New_GuardianID int = NULL,
	@New_PersonCode smallint = NULL,
	@New_isSmoker bit = NULL,
	@New_isClient bit = NULL,
	@New_isNursing bit = NULL,
	@New_isPregnant bit = NULL,
	@New_EthnicityID tinyint = NULL,
	@New_LanguageID tinyint = NULL,
	@New_PrimaryLanguage bit = 1,
	@New_HobbyID int = NULL,
	@New_OccupationID int = NULL,
	@New_Occupation_StartDate date = NULL,
	@New_Occupation_EndDate date = NULL,
	@DEBUG BIT = 0

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	BEGIN
		DECLARE @ErrorLogID int,
				@updatePerson_return_value int,
				@Ethnicity_return_value int,
				@PersontoFamily_return_value int,
				@PersontoLanguage_return_value int,
				@PersontoHobby_return_value int,
				@PersontoOccupation_return_value int,
				@PersontoEthnicity_return_value int;
	
		-- If no family ID was passed in exit
		IF (@Family_ID IS NULL OR @Person_ID IS NULL)
		BEGIN
			RAISERROR ('Family and Person must be supplied', 11, -1);
			RETURN;
		END;

		if (@New_LastName is null)
		BEGIN
			select @New_LastName = Lastname from Family where FamilyID = @Family_ID
		END

		BEGIN TRY  -- update person
			EXEC	@updatePerson_return_value = [dbo].[usp_upPerson]
						@Person_ID = @Person_ID,
						@New_FirstName = @New_FirstName,
						@New_MiddleName = @New_MiddleName,
						@New_LastName = @New_LastName,
						@New_BirthDate = @New_BirthDate,
						@New_Gender = @New_Gender,
						@New_StatusID = @New_StatusID,
						@New_ForeignTravel = @New_ForeignTravel,
						@New_OutofSite = @New_OutofSite,
						@New_EatsForeignFood = @New_EatsForeignFood,
						@New_PatientID = @New_PatientID,
						@New_RetestDate = @New_RetestDate,
						@New_Moved = @New_Moved,
						@New_MovedDate = @New_MovedDate,
						@New_isClosed = @New_isClosed,
						@New_isResolved = @New_isResolved,
						@New_Notes = @New_Notes,
						@New_GuardianID = @New_GuardianID,
						@New_PersonCode = @New_PersonCode,
						@New_isSmoker = @New_isSmoker,
						@New_isClient = @New_isClient,
						@New_isNursing = @New_isNursing,
						@New_isPregnant = @New_isPregnant,
						@DEBUG = @DEBUG

			-- Associate person to Ethnicity
			IF ((@New_EthnicityID IS NOT NULL) AND
					(NOT EXISTS (SELECT PersonID from PersontoEthnicity where EthnicityID = @New_EthnicityID and PersonID = @Person_ID)))
				EXEC	@Ethnicity_return_value = [dbo].[usp_InsertPersontoEthnicity]
						@PersonID = @Person_ID,
						@EthnicityID = @New_EthnicityID
			-- CODE FOR FUTURE EXTENSIBILITY OF UPDATING ETHNICITY
			--IF (@New_Ethnicity IS NOT NULL)
			--EXEC	@Ethnicity_return_value = [dbo].[usp_upEthnicity]
			--		@PersonID = @Person_ID,
			--		@New_EthnicityID = @New_EthnicityID,
			--		@DEBUG = @DEBUG,
			--		@PersontoEthnicityID = @New_PersontoEthnicityID OUTPUT

			-- Associate person to family
			-- If the person isn't already associated with that family
			if NOT EXISTS(SELECT PersonID from PersontoFamily where FamilyID = @Family_ID and PersonID = @Person_ID)
			EXEC	@PersontoFamily_return_value = usp_InsertPersontoFamily
					@PersonID = @Person_ID, @FamilyID = @Family_ID, @OUTPUT = @PersontoFamily_return_value OUTPUT;

			-- Associate person to language
			IF ((@New_LanguageID is not NULL) AND
				(NOT EXISTS (SELECT PersonID from PersontoLanguage where LanguageID = @New_LanguageID and PersonID = @Person_ID)))
			EXEC 	@PersontoLanguage_return_value = usp_InsertPersontoLanguage
					@LanguageID = @New_LanguageID, @PersonID = @Person_ID, @isPrimaryLanguage = @New_PrimaryLanguage;

			-- associate person to Hobby
			IF ((@New_HobbyID is not NULL) AND 
				(NOT EXISTS (SELECT PersonID from PersontoHobby where HobbyID = @New_HobbyID and PersonID = @Person_ID)) )
			EXEC	@PersontoHobby_return_value = usp_InsertPersontoHobby
					@HobbyID = @New_HobbyID, @PersonID = @Person_ID;

			-- associate person to occupation
			if ((@New_OccupationID is not NULL))
				IF (NOT EXISTS (SELECT PersonID from PersontoOccupation where OccupationID = @New_OccupationID and PersonID = @Person_ID))
				EXEC	@PersontoOccupation_return_value = [dbo].[usp_InsertPersontoOccupation]
						@PersonID = @Person_ID,
						@OccupationID = @New_OccupationID,
						@StartDate = @New_Occupation_StartDate,
						@EndDate = @New_Occupation_EndDate
			ELSE
				EXEC	@PersontoOccupation_return_value = [dbo].[usp_upOccupation]
						@PersonID = @Person_ID,
						@OccupationID = @New_OccupationID,
						@Occupation_StartDate = @New_Occupation_StartDate,
						@Occupation_EndDate = @New_Occupation_EndDate,
						@DEBUG = @DEBUG;
		END TRY
		BEGIN CATCH -- insert person
			-- Call procedure to print error information.
			EXECUTE dbo.uspPrintError;

			-- Roll back any active or uncommittable transactions before
			-- inserting information in the ErrorLog.
			IF XACT_STATE() <> 0
			BEGIN
				ROLLBACK TRANSACTION;
			END

			EXECUTE dbo.uspLogError @ErrorLogID = @ErrorLogID OUTPUT;
			RETURN ERROR_NUMBER()
		END CATCH; -- insert new person
	END
END
GO
PRINT N'Creating [dbo].[Family].[ForeignTravel].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'does the family travel to foreign countries', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'Family', @level2type = N'COLUMN', @level2name = N'ForeignTravel';


GO
PRINT N'Creating [dbo].[PersontoEthnicity].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'linking table for person and ethnicity', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'PersontoEthnicity';


GO
PRINT N'Creating [dbo].[PersontoPerson].[isGuardian].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'isGuardian is 1 if P1 is P2''s guardian', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'PersontoPerson', @level2type = N'COLUMN', @level2name = N'isGuardian';


GO
PRINT N'Creating [dbo].[PersontoPerson].[isPrimaryContact].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'isPrimaryContact is 1 if P1 is P2''s primaryContact', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'PersontoPerson', @level2type = N'COLUMN', @level2name = N'isPrimaryContact';


GO
PRINT N'Creating [dbo].[PersontoPerson].[RelationshipTypeID].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'relationshipType is how P1 relates to P2', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'PersontoPerson', @level2type = N'COLUMN', @level2name = N'RelationshipTypeID';


GO
PRINT N'Refreshing [dbo].[usp_InsertNewBloodLeadTestResultsWebScreen]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_InsertNewBloodLeadTestResultsWebScreen]';


GO
PRINT N'Update complete.';


GO
