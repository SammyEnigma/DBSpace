/*
Deployment script for LCCHPPublic

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "LCCHPPublic"
:setvar DefaultFilePrefix "LCCHPPublic"
:setvar DefaultDataPath "D:\MSSQL\Data\"
:setvar DefaultLogPath "D:\MSSQL\Log\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Dropping [dbo].[DF_Person_CreatedDate]...';


GO
ALTER TABLE [dbo].[Person] DROP CONSTRAINT [DF_Person_CreatedDate];


GO
PRINT N'Dropping [dbo].[DF_Person_isClient]...';


GO
ALTER TABLE [dbo].[Person] DROP CONSTRAINT [DF_Person_isClient];


GO
PRINT N'Dropping [dbo].[DF_Questionnaire_isTakingVitamins]...';


GO
ALTER TABLE [dbo].[Questionnaire] DROP CONSTRAINT [DF_Questionnaire_isTakingVitamins];


GO
PRINT N'Dropping [dbo].[DF_Questionnaire_isNursing]...';


GO
ALTER TABLE [dbo].[Questionnaire] DROP CONSTRAINT [DF_Questionnaire_isNursing];


GO
PRINT N'Dropping [dbo].[DF_Questionnaire_isUsingPacifier]...';


GO
ALTER TABLE [dbo].[Questionnaire] DROP CONSTRAINT [DF_Questionnaire_isUsingPacifier];


GO
PRINT N'Dropping [dbo].[DF_Questionnaire_isUsingBottle]...';


GO
ALTER TABLE [dbo].[Questionnaire] DROP CONSTRAINT [DF_Questionnaire_isUsingBottle];


GO
PRINT N'Dropping [dbo].[DF_Questionnaire_Bitesnails]...';


GO
ALTER TABLE [dbo].[Questionnaire] DROP CONSTRAINT [DF_Questionnaire_Bitesnails];


GO
PRINT N'Dropping [dbo].[DF_Questionnaire_NonFoodEating]...';


GO
ALTER TABLE [dbo].[Questionnaire] DROP CONSTRAINT [DF_Questionnaire_NonFoodEating];


GO
PRINT N'Dropping [dbo].[DF_Questionnaire_NonFoodinMouth]...';


GO
ALTER TABLE [dbo].[Questionnaire] DROP CONSTRAINT [DF_Questionnaire_NonFoodinMouth];


GO
PRINT N'Dropping [dbo].[DF_Questionnaire_EatOutside]...';


GO
ALTER TABLE [dbo].[Questionnaire] DROP CONSTRAINT [DF_Questionnaire_EatOutside];


GO
PRINT N'Dropping [dbo].[DF_Questionnaire_Suckling]...';


GO
ALTER TABLE [dbo].[Questionnaire] DROP CONSTRAINT [DF_Questionnaire_Suckling];


GO
PRINT N'Dropping [dbo].[DF_Questionnaire_FrequentHandWashing]...';


GO
ALTER TABLE [dbo].[Questionnaire] DROP CONSTRAINT [DF_Questionnaire_FrequentHandWashing];


GO
PRINT N'Dropping [dbo].[DF_Questionnaire_Daycare]...';


GO
ALTER TABLE [dbo].[Questionnaire] DROP CONSTRAINT [DF_Questionnaire_Daycare];


GO
PRINT N'Dropping [dbo].[DF_Questionnaire_CreatedDate]...';


GO
ALTER TABLE [dbo].[Questionnaire] DROP CONSTRAINT [DF_Questionnaire_CreatedDate];


GO
PRINT N'Dropping [dbo].[FK_PersonNotes_Person]...';


GO
ALTER TABLE [dbo].[PersonNotes] DROP CONSTRAINT [FK_PersonNotes_Person];


GO
PRINT N'Dropping [dbo].[FK_PersonReleaseNotes_Person]...';


GO
ALTER TABLE [dbo].[PersonReleaseNotes] DROP CONSTRAINT [FK_PersonReleaseNotes_Person];


GO
PRINT N'Dropping [dbo].[FK_PersontoAccessAgreement_Person]...';


GO
ALTER TABLE [dbo].[PersontoAccessAgreement] DROP CONSTRAINT [FK_PersontoAccessAgreement_Person];


GO
PRINT N'Dropping [dbo].[FK_Person_ReviewStatus]...';


GO
ALTER TABLE [dbo].[Person] DROP CONSTRAINT [FK_Person_ReviewStatus];


GO
PRINT N'Dropping [dbo].[FK_PersontoDaycare_PersontoDaycare]...';


GO
ALTER TABLE [dbo].[PersontoDaycare] DROP CONSTRAINT [FK_PersontoDaycare_PersontoDaycare];


GO
PRINT N'Dropping [dbo].[FK_Questionnaire_Person]...';


GO
ALTER TABLE [dbo].[Questionnaire] DROP CONSTRAINT [FK_Questionnaire_Person];


GO
PRINT N'Dropping [dbo].[FK_PersontoEmployer_Person]...';


GO
ALTER TABLE [dbo].[PersontoEmployer] DROP CONSTRAINT [FK_PersontoEmployer_Person];


GO
PRINT N'Dropping [dbo].[FK_PersontoEthnicity_Person]...';


GO
ALTER TABLE [dbo].[PersontoEthnicity] DROP CONSTRAINT [FK_PersontoEthnicity_Person];


GO
PRINT N'Dropping [dbo].[FK_PersontoFamily_Person]...';


GO
ALTER TABLE [dbo].[PersontoFamily] DROP CONSTRAINT [FK_PersontoFamily_Person];


GO
PRINT N'Dropping [dbo].[FK_PersontoForeignFood_Person]...';


GO
ALTER TABLE [dbo].[PersontoForeignFood] DROP CONSTRAINT [FK_PersontoForeignFood_Person];


GO
PRINT N'Dropping [dbo].[FK_PersontoHobby_Person]...';


GO
ALTER TABLE [dbo].[PersontoHobby] DROP CONSTRAINT [FK_PersontoHobby_Person];


GO
PRINT N'Dropping [dbo].[FK_PersontoHomeRemedy_Person]...';


GO
ALTER TABLE [dbo].[PersontoHomeRemedy] DROP CONSTRAINT [FK_PersontoHomeRemedy_Person];


GO
PRINT N'Dropping [dbo].[FK_PersontoInsurance_Person]...';


GO
ALTER TABLE [dbo].[PersontoInsurance] DROP CONSTRAINT [FK_PersontoInsurance_Person];


GO
PRINT N'Dropping [dbo].[FK_BloodTestResults_Person]...';


GO
ALTER TABLE [dbo].[BloodTestResults] DROP CONSTRAINT [FK_BloodTestResults_Person];


GO
PRINT N'Dropping [dbo].[FK_PersontoLanguage_Person]...';


GO
ALTER TABLE [dbo].[PersontoLanguage] DROP CONSTRAINT [FK_PersontoLanguage_Person];


GO
PRINT N'Dropping [dbo].[FK_PersontoOccupation_Person]...';


GO
ALTER TABLE [dbo].[PersontoOccupation] DROP CONSTRAINT [FK_PersontoOccupation_Person];


GO
PRINT N'Dropping [dbo].[FK_PersontoPerson_Person1ID]...';


GO
ALTER TABLE [dbo].[PersontoPerson] DROP CONSTRAINT [FK_PersontoPerson_Person1ID];


GO
PRINT N'Dropping [dbo].[FK_PersontoPerson_Person2ID]...';


GO
ALTER TABLE [dbo].[PersontoPerson] DROP CONSTRAINT [FK_PersontoPerson_Person2ID];


GO
PRINT N'Dropping [dbo].[FK_PersontoPhoneNumber_Person]...';


GO
ALTER TABLE [dbo].[PersontoPhoneNumber] DROP CONSTRAINT [FK_PersontoPhoneNumber_Person];


GO
PRINT N'Dropping [dbo].[FK_PersontoProperty_Person]...';


GO
ALTER TABLE [dbo].[PersontoProperty] DROP CONSTRAINT [FK_PersontoProperty_Person];


GO
PRINT N'Dropping [dbo].[FK_PersonToStatus_Person]...';


GO
ALTER TABLE [dbo].[PersonToStatus] DROP CONSTRAINT [FK_PersonToStatus_Person];


GO
PRINT N'Dropping [dbo].[FK_PersonToTravelCountry_Person]...';


GO
ALTER TABLE [dbo].[PersonToTravelCountry] DROP CONSTRAINT [FK_PersonToTravelCountry_Person];


GO
PRINT N'Dropping [dbo].[FK_PersonTravelNotes_Person]...';


GO
ALTER TABLE [dbo].[PersonTravelNotes] DROP CONSTRAINT [FK_PersonTravelNotes_Person];


GO
PRINT N'Dropping [dbo].[FK_Property_Person]...';


GO
ALTER TABLE [dbo].[Property] DROP CONSTRAINT [FK_Property_Person];


GO
PRINT N'Dropping [dbo].[FK_GiftCard_Person]...';


GO
ALTER TABLE [dbo].[GiftCard] DROP CONSTRAINT [FK_GiftCard_Person];


GO
PRINT N'Dropping [dbo].[FK_PersonHobbyNotes_Person]...';


GO
ALTER TABLE [dbo].[PersonHobbyNotes] DROP CONSTRAINT [FK_PersonHobbyNotes_Person];


GO
PRINT N'Dropping [dbo].[FK_Questionnaire_ReviewStatus]...';


GO
ALTER TABLE [dbo].[Questionnaire] DROP CONSTRAINT [FK_Questionnaire_ReviewStatus];


GO
PRINT N'Dropping [dbo].[FK_QuestionnaireNotes_Questionnaire]...';


GO
ALTER TABLE [dbo].[QuestionnaireNotes] DROP CONSTRAINT [FK_QuestionnaireNotes_Questionnaire];


GO
PRINT N'Dropping [dbo].[ck_Person_BirthDate]...';


GO
ALTER TABLE [dbo].[Person] DROP CONSTRAINT [ck_Person_BirthDate];


GO
PRINT N'Dropping [dbo].[ck_Person_MovedDate]...';


GO
ALTER TABLE [dbo].[Person] DROP CONSTRAINT [ck_Person_MovedDate];


GO
PRINT N'Dropping [dbo].[ck_Questionnaire_PaintDate]...';


GO
ALTER TABLE [dbo].[Questionnaire] DROP CONSTRAINT [ck_Questionnaire_PaintDate];


GO
PRINT N'Dropping [dbo].[ck_Questionnaire_QuestionnaireDate]...';


GO
ALTER TABLE [dbo].[Questionnaire] DROP CONSTRAINT [ck_Questionnaire_QuestionnaireDate];


GO
PRINT N'Dropping [dbo].[ck_Questionnaire_RemodelPropertyDate]...';


GO
ALTER TABLE [dbo].[Questionnaire] DROP CONSTRAINT [ck_Questionnaire_RemodelPropertyDate];


GO
PRINT N'Dropping [dbo].[ck_BloodTestResults_SampleDate]...';


GO
ALTER TABLE [dbo].[BloodTestResults] DROP CONSTRAINT [ck_BloodTestResults_SampleDate];


GO
PRINT N'Dropping [dbo].[ck_MediumSampleResults_MediumSampleDate]...';


GO
ALTER TABLE [dbo].[MediumSampleResults] DROP CONSTRAINT [ck_MediumSampleResults_MediumSampleDate];


GO
PRINT N'Dropping [dbo].[ck_PropertySampleResults_LabSubmissionDate]...';


GO
ALTER TABLE [dbo].[PropertySampleResults] DROP CONSTRAINT [ck_PropertySampleResults_LabSubmissionDate];


GO
PRINT N'Dropping [dbo].[ck_Remediation_RemediationApprovalDate]...';


GO
ALTER TABLE [dbo].[Remediation] DROP CONSTRAINT [ck_Remediation_RemediationApprovalDate];


GO
PRINT N'Dropping [dbo].[ck_RemediationActionPlan_RemediationActionPlanApprovalDate]...';


GO
ALTER TABLE [dbo].[RemediationActionPlan] DROP CONSTRAINT [ck_RemediationActionPlan_RemediationActionPlanApprovalDate];


GO
PRINT N'Dropping [dbo].[vNursingMothers]...';


GO
DROP VIEW [dbo].[vNursingMothers];


GO
PRINT N'Unbinding columns from changing objects on table [dbo].[Person]...';


GO
ALTER TABLE [dbo].[Person] DROP COLUMN [Age];


GO
PRINT N'Unbinding columns from changing objects on table [dbo].[Questionnaire]...';


GO
ALTER TABLE [dbo].[Questionnaire] DROP COLUMN [PaintAge], COLUMN [RemodeledPropertyAge];


GO
PRINT N'Altering [dbo].[LCCHPAttachments]...';


GO
ALTER TABLE [dbo].[LCCHPAttachments] SET (FILETABLE_DIRECTORY = N'LCCHPAttachmentsDev');


GO
PRINT N'Creating [dbo].[trUpdateAccessAgreement]...';


GO
create trigger trUpdateAccessAgreement on AccessAgreement AFTER UPDATE
	as
	 begin
	  if @@rowcount = 0
		return
	  if not update(ModifiedDate) update AccessAgreement set ModifiedDate = getdate() where AccessAgreementID in (select AccessAgreementID from inserted)

	end
GO
PRINT N'Creating [dbo].[trUpdateAccessPurpose]...';


GO
create trigger trUpdateAccessPurpose on AccessPurpose AFTER UPDATE
	as
	 begin
	  if @@rowcount = 0
		return
	  if not update(ModifiedDate) update AccessPurpose set ModifiedDate = getdate() where AccessPurposeID in (select AccessPurposeID from inserted)

	end
GO
PRINT N'Creating [dbo].[trUpdateArea]...';


GO
create trigger trUpdateArea on Area AFTER UPDATE
	as
	 begin
	  if @@rowcount = 0
		return
	  if not update(ModifiedDate) update Area set ModifiedDate = getdate() where AreaID in (select AreaID from inserted)

	end
GO
PRINT N'Creating [dbo].[trUpdateBloodTestResults]...';


GO
create trigger trUpdateBloodTestResults on BloodTestResults AFTER UPDATE
	as
	 begin
	  if @@rowcount = 0
		return
	  if not update(ModifiedDate) update BloodTestResults set ModifiedDate = getdate() where BloodTestResultsID in (select BloodTestResultsID from inserted)

	end
GO
PRINT N'Creating [dbo].[trUpdateCleanupStatus]...';


GO
create trigger trUpdateCleanupStatus on CleanupStatus AFTER UPDATE
	as
	 begin
	  if @@rowcount = 0
		return
	  if not update(ModifiedDate) update CleanupStatus set ModifiedDate = getdate() where CleanupStatusID in (select CleanupStatusID from inserted)

	end
GO
PRINT N'Creating [dbo].[trUpdateConstructionType]...';


GO
create trigger trUpdateConstructionType on ConstructionType AFTER UPDATE
	as
	 begin
	  if @@rowcount = 0
		return
	  if not update(ModifiedDate) update ConstructionType set ModifiedDate = getdate() where ConstructionTypeID in (select ConstructionTypeID from inserted)

	end
GO
PRINT N'Creating [dbo].[trUpdateContractor]...';


GO
create trigger trUpdateContractor on Contractor AFTER UPDATE
	as
	 begin
	  if @@rowcount = 0
		return
	  if not update(ModifiedDate) update Contractor set ModifiedDate = getdate() where ContractorID in (select ContractorID from inserted)

	end
GO
PRINT N'Creating [dbo].[trUpdateCountry]...';


GO
create trigger trUpdateCountry on Country AFTER UPDATE
	as
	 begin
	  if @@rowcount = 0
		return
	  if not update(ModifiedDate) update Country set ModifiedDate = getdate() where CountryID in (select CountryID from inserted)

	end
GO
PRINT N'Creating [dbo].[trUpdateDaycare]...';


GO
create trigger trUpdateDaycare on Daycare AFTER UPDATE
	as
	 begin
	  if @@rowcount = 0
		return
	  if not update(ModifiedDate) update Daycare set ModifiedDate = getdate() where DaycareID in (select DaycareID from inserted)

	end
GO
PRINT N'Creating [dbo].[trUpdateEmployer]...';


GO
create trigger trUpdateEmployer on Employer AFTER UPDATE
	as
	 begin
	  if @@rowcount = 0
		return
	  if not update(ModifiedDate) update Employer set ModifiedDate = getdate() where EmployerID in (select EmployerID from inserted)

	end
GO
PRINT N'Creating [dbo].[trUpdateEnvironmentalInvestigation]...';


GO
create trigger trUpdateEnvironmentalInvestigation on EnvironmentalInvestigation AFTER UPDATE
	as
	 begin
	  if @@rowcount = 0
		return
	  if not update(ModifiedDate) update EnvironmentalInvestigation set ModifiedDate = getdate() where EnvironmentalInvestigationID in (select EnvironmentalInvestigationID from inserted)

	end
GO
PRINT N'Creating [dbo].[trUpdateEthnicity]...';


GO
create trigger trUpdateEthnicity on Ethnicity AFTER UPDATE
	as
	 begin
	  if @@rowcount = 0
		return
	  if not update(ModifiedDate) update Ethnicity set ModifiedDate = getdate() where EthnicityID in (select EthnicityID from inserted)

	end
GO
PRINT N'Creating [dbo].[trUpdateFamily]...';


GO
create trigger trUpdateFamily on Family AFTER UPDATE
	as
	 begin
	  if @@rowcount = 0
		return
	  if not update(ModifiedDate) update Family set ModifiedDate = getdate() where FamilyID in (select FamilyID from inserted)

	end
GO
PRINT N'Creating [dbo].[trUpdateFamilytoProperty]...';


GO

create trigger [dbo].[trUpdateFamilytoProperty] on [dbo].[FamilytoProperty] AFTER UPDATE
	as
	 begin
	  if @@rowcount = 0
		return
	  if not update(ModifiedDate) update FamilytoProperty set ModifiedDate = getdate() where FamilytoPropertyID in (select FamilytoPropertyID from inserted)

	end
GO
PRINT N'Creating [dbo].[trUpdateFileType]...';


GO
create trigger trUpdateFileType on FileType AFTER UPDATE
	as
	 begin
	  if @@rowcount = 0
		return
	  if not update(ModifiedDate) update FileType set ModifiedDate = getdate() where FileTypeID in (select FileTypeID from inserted)

	end
GO
PRINT N'Creating [dbo].[trUpdateForeignFood]...';


GO
create trigger trUpdateForeignFood on ForeignFood AFTER UPDATE
	as
	 begin
	  if @@rowcount = 0
		return
	  if not update(ModifiedDate) update ForeignFood set ModifiedDate = getdate() where ForeignFoodID in (select ForeignFoodID from inserted)

	end
GO
PRINT N'Creating [dbo].[trUpdateGiftCard]...';


GO
create trigger trUpdateGiftCard on GiftCard AFTER UPDATE
	as
	 begin
	  if @@rowcount = 0
		return
	  if not update(ModifiedDate) update GiftCard set ModifiedDate = getdate() where GiftCardID in (select GiftCardID from inserted)

	end
GO
PRINT N'Creating [dbo].[trUpdateHobby]...';


GO
create trigger trUpdateHobby on Hobby AFTER UPDATE
	as
	 begin
	  if @@rowcount = 0
		return
	  if not update(ModifiedDate) update Hobby set ModifiedDate = getdate() where HobbyID in (select HobbyID from inserted)

	end
GO
PRINT N'Creating [dbo].[trUpdateHomeRemedy]...';


GO
create trigger trUpdateHomeRemedy on HomeRemedy AFTER UPDATE
	as
	 begin
	  if @@rowcount = 0
		return
	  if not update(ModifiedDate) update HomeRemedy set ModifiedDate = getdate() where HomeRemedyID in (select HomeRemedyID from inserted)

	end
GO
PRINT N'Creating [dbo].[trUpdateHouseholdSourcesofLead]...';


GO
create trigger trUpdateHouseholdSourcesofLead on HouseholdSourcesofLead AFTER UPDATE
	as
	 begin
	  if @@rowcount = 0
		return
	  if not update(ModifiedDate) update HouseholdSourcesofLead set ModifiedDate = getdate() where HouseholdSourcesofLeadID in (select HouseholdSourcesofLeadID from inserted)

	end
GO
PRINT N'Creating [dbo].[trUpdateInsuranceProvider]...';


GO
create trigger trUpdateInsuranceProvider on InsuranceProvider AFTER UPDATE
	as
	 begin
	  if @@rowcount = 0
		return
	  if not update(ModifiedDate) update InsuranceProvider set ModifiedDate = getdate() where InsuranceProviderID in (select InsuranceProviderID from inserted)

	end
GO
PRINT N'Creating [dbo].[trUpdateLab]...';


GO
create trigger trUpdateLab on Lab AFTER UPDATE
	as
	 begin
	  if @@rowcount = 0
		return
	  if not update(ModifiedDate) update Lab set ModifiedDate = getdate() where LabID in (select LabID from inserted)

	end
GO
PRINT N'Creating [dbo].[trUpdateLanguage]...';


GO
create trigger trUpdateLanguage on Language AFTER UPDATE
	as
	 begin
	  if @@rowcount = 0
		return
	  if not update(ModifiedDate) update Language set ModifiedDate = getdate() where LanguageID in (select LanguageID from inserted)

	end
GO
PRINT N'Creating [dbo].[trUpdateMedium]...';


GO
create trigger trUpdateMedium on Medium AFTER UPDATE
	as
	 begin
	  if @@rowcount = 0
		return
	  if not update(ModifiedDate) update Medium set ModifiedDate = getdate() where MediumID in (select MediumID from inserted)

	end
GO
PRINT N'Creating [dbo].[trUpdateMediumSampleResults]...';


GO
create trigger trUpdateMediumSampleResults on MediumSampleResults AFTER UPDATE
	as
	 begin
	  if @@rowcount = 0
		return
	  if not update(ModifiedDate) update MediumSampleResults set ModifiedDate = getdate() where MediumSampleResultsID in (select MediumSampleResultsID from inserted)

	end
GO
PRINT N'Creating [dbo].[trUpdateOccupation]...';


GO
create trigger trUpdateOccupation on Occupation AFTER UPDATE
	as
	 begin
	  if @@rowcount = 0
		return
	  if not update(ModifiedDate) update Occupation set ModifiedDate = getdate() where OccupationID in (select OccupationID from inserted)

	end
GO
PRINT N'Creating [dbo].[trUpdatePhoneNumber]...';


GO
create trigger trUpdatePhoneNumber on PhoneNumber AFTER UPDATE
	as
	 begin
	  if @@rowcount = 0
		return
	  if not update(ModifiedDate) update PhoneNumber set ModifiedDate = getdate() where PhoneNumberID in (select PhoneNumberID from inserted)

	end
GO
PRINT N'Creating [dbo].[trUpdatePhoneNumberType]...';


GO
create trigger trUpdatePhoneNumberType on PhoneNumberType AFTER UPDATE
	as
	 begin
	  if @@rowcount = 0
		return
	  if not update(ModifiedDate) update PhoneNumberType set ModifiedDate = getdate() where PhoneNumberTypeID in (select PhoneNumberTypeID from inserted)

	end
GO
PRINT N'Creating [dbo].[trUpdateProperty]...';


GO
create trigger trUpdateProperty on Property AFTER UPDATE
	as
	 begin
	  if @@rowcount = 0
		return
	  if not update(ModifiedDate) update Property set ModifiedDate = getdate() where PropertyID in (select PropertyID from inserted)

	end
GO
PRINT N'Creating [dbo].[trUpdatePropertySampleResults]...';


GO
create trigger trUpdatePropertySampleResults on PropertySampleResults AFTER UPDATE
	as
	 begin
	  if @@rowcount = 0
		return
	  if not update(ModifiedDate) update PropertySampleResults set ModifiedDate = getdate() where PropertySampleResultsID in (select PropertySampleResultsID from inserted)

	end
GO
PRINT N'Creating [dbo].[trUpdateRelationshipType]...';


GO

create trigger trUpdateRelationshipType on RelationshipType AFTER UPDATE
	as
	 begin
	  if @@rowcount = 0
		return
	  if not update(ModifiedDate) update RelationshipType set ModifiedDate = getdate() where RelationshipTypeID in (select RelationshipTypeID from inserted)

	end
GO
PRINT N'Creating [dbo].[trUpdateRemediation]...';


GO
	create trigger trUpdateRemediation on Remediation AFTER UPDATE
	as
	 begin
	  if @@rowcount = 0
		return
	  if not update(ModifiedDate) update Remediation set ModifiedDate = getdate() where RemediationID in (select RemediationID from inserted)

	end
GO
PRINT N'Creating [dbo].[trUpdateRemediationActionPlan]...';


GO
create trigger trUpdateRemediationActionPlan on RemediationActionPlan AFTER UPDATE
	as
	 begin
	  if @@rowcount = 0
		return
	  if not update(ModifiedDate) update RemediationActionPlan set ModifiedDate = getdate() where RemediationActionPlanID in (select RemediationActionPlanID from inserted)

	end
GO
PRINT N'Creating [dbo].[trUpdateSampleLevelCategory]...';


GO
create trigger trUpdateSampleLevelCategory on SampleLevelCategory AFTER UPDATE
	as
	 begin
	  if @@rowcount = 0
		return
	  if not update(ModifiedDate) update SampleLevelCategory set ModifiedDate = getdate() where SampleLevelCategoryID in (select SampleLevelCategoryID from inserted)

	end
GO
PRINT N'Creating [dbo].[trUpdateSampleType]...';


GO
create trigger trUpdateSampleType on SampleType AFTER UPDATE
	as
	 begin
	  if @@rowcount = 0
		return
	  if not update(ModifiedDate) update SampleType set ModifiedDate = getdate() where SampleTypeID in (select SampleTypeID from inserted)

	end
GO
PRINT N'Creating [dbo].[trUpdateStatus]...';


GO
CREATE trigger [dbo].[trUpdateStatus] on [dbo].[TargetStatus] AFTER UPDATE
	as
	 begin
	  if @@rowcount = 0
		return
	  if not update(ModifiedDate) update TargetStatus set ModifiedDate = getdate() where StatusID in (select StatusID from inserted)

	end
GO
PRINT N'Creating [dbo].[trUpdateUnits]...';


GO
create trigger trUpdateUnits on Units AFTER UPDATE
	as
	 begin
	  if @@rowcount = 0
		return
	  if not update(ModifiedDate) update Units set ModifiedDate = getdate() where UnitsID in (select UnitsID from inserted)

	end
GO
PRINT N'Altering [dbo].[udf_CalculateAge]...';


GO

ALTER FUNCTION udf_CalculateAge
 (
   @BirthDate datetime = NULL,
   @CurrentDate datetime = NULL
 )
 RETURNS int

 AS

 BEGIN

 IF @BirthDate IS NULL
	RETURN -1;

 IF @CurrentDate IS NULL
	SET @CurrentDate = GetDate();

 IF @BirthDate > @CurrentDate
   RETURN 0

 DECLARE @Age int
 SELECT @Age = DATEDIFF(YY, @BirthDate, @CurrentDate) - 
	CASE WHEN(
		(MONTH(@BirthDate)*100 + DAY(@BirthDate)) >
		(MONTH(@CurrentDate)*100 + DAY(@CurrentDate))
	) THEN 1 ELSE 0 END
 RETURN @Age

 END
GO
PRINT N'Starting rebuilding table [dbo].[Person]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Person] (
    [PersonID]        INT           IDENTITY (1, 1) NOT NULL,
    [FirstName]       VARCHAR (50)  NOT NULL,
    [MiddleName]      VARCHAR (50)  NULL,
    [LastName]        VARCHAR (50)  NOT NULL,
    [BirthDate]       DATE          NULL,
    [Gender]          CHAR (1)      NULL,
    [StatusID]        SMALLINT      NULL,
    [ForeignTravel]   BIT           NULL,
    [OutofSite]       BIT           NULL,
    [EatsForeignFood] BIT           NULL,
    [HistoricChildID] SMALLINT      NULL,
    [RetestDate]      DATE          NULL,
    [Moved]           BIT           NULL,
    [MovedDate]       DATE          NULL,
    [isClosed]        BIT           NULL,
    [isResolved]      BIT           NULL,
    [GuardianID]      INT           NULL,
    [personCode]      SMALLINT      NULL,
    [isSmoker]        BIT           NULL,
    [CreatedDate]     DATETIME      CONSTRAINT [DF_Person_CreatedDate] DEFAULT (getdate()) NULL,
    [ModifiedDate]    DATETIME      NULL,
    [Age]             AS            ([dbo].[udf_CalculateAge]([BirthDate], getdate())),
    [isClient]        BIT           CONSTRAINT [DF_Person_isClient] DEFAULT ((1)) NULL,
    [isNursing]       BIT           NULL,
    [isPregnant]      BIT           NULL,
    [ReleaseStatusID] TINYINT       NULL,
    [ReviewStatusID]  TINYINT       NULL,
    [EmailAddress]    VARCHAR (320) NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_Person] PRIMARY KEY CLUSTERED ([PersonID] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Person])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Person] ON;
        INSERT INTO [dbo].[tmp_ms_xx_Person] ([PersonID], [FirstName], [MiddleName], [LastName], [BirthDate], [Gender], [StatusID], [ForeignTravel], [OutofSite], [EatsForeignFood], [HistoricChildID], [RetestDate], [Moved], [MovedDate], [isClosed], [isResolved], [GuardianID], [personCode], [isSmoker], [CreatedDate], [ModifiedDate], [isClient], [isNursing], [isPregnant], [ReleaseStatusID], [ReviewStatusID], [EmailAddress])
        SELECT   [PersonID],
                 [FirstName],
                 [MiddleName],
                 [LastName],
                 [BirthDate],
                 [Gender],
                 [StatusID],
                 [ForeignTravel],
                 [OutofSite],
                 [EatsForeignFood],
                 [HistoricChildID],
                 [RetestDate],
                 [Moved],
                 [MovedDate],
                 [isClosed],
                 [isResolved],
                 [GuardianID],
                 [personCode],
                 [isSmoker],
                 [CreatedDate],
                 [ModifiedDate],
                 [isClient],
                 [isNursing],
                 [isPregnant],
                 [ReleaseStatusID],
                 [ReviewStatusID],
                 [EmailAddress]
        FROM     [dbo].[Person]
        ORDER BY [PersonID] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Person] OFF;
    END

DROP TABLE [dbo].[Person];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Person]', N'Person';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_Person]', N'PK_Person', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating [dbo].[Person].[NonClusteredIndex-20141220-115023]...';


GO
CREATE NONCLUSTERED INDEX [NonClusteredIndex-20141220-115023]
    ON [dbo].[Person]([LastName] ASC, [RetestDate] ASC);


GO
PRINT N'Starting rebuilding table [dbo].[Questionnaire]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Questionnaire] (
    [QuestionnaireID]           INT      IDENTITY (1, 1) NOT NULL,
    [PersonID]                  INT      NOT NULL,
    [QuestionnaireDate]         DATE     NULL,
    [QuestionnaireDataSourceID] INT      NULL,
    [VisitRemodeledProperty]    BIT      NULL,
    [isExposedtoPeelingPaint]   BIT      NULL,
    [isTakingVitamins]          BIT      CONSTRAINT [DF_Questionnaire_isTakingVitamins] DEFAULT ((0)) NULL,
    [isNursing]                 BIT      CONSTRAINT [DF_Questionnaire_isNursing] DEFAULT ((0)) NULL,
    [isUsingPacifier]           BIT      CONSTRAINT [DF_Questionnaire_isUsingPacifier] DEFAULT ((0)) NULL,
    [isUsingBottle]             BIT      CONSTRAINT [DF_Questionnaire_isUsingBottle] DEFAULT ((0)) NULL,
    [BitesNails]                BIT      CONSTRAINT [DF_Questionnaire_Bitesnails] DEFAULT ((0)) NULL,
    [NonFoodEating]             BIT      CONSTRAINT [DF_Questionnaire_NonFoodEating] DEFAULT ((0)) NULL,
    [NonFoodinMouth]            BIT      CONSTRAINT [DF_Questionnaire_NonFoodinMouth] DEFAULT ((0)) NULL,
    [EatOutside]                BIT      CONSTRAINT [DF_Questionnaire_EatOutside] DEFAULT ((0)) NULL,
    [Suckling]                  BIT      CONSTRAINT [DF_Questionnaire_Suckling] DEFAULT ((0)) NULL,
    [FrequentHandWashing]       BIT      CONSTRAINT [DF_Questionnaire_FrequentHandWashing] DEFAULT ((0)) NULL,
    [Daycare]                   BIT      CONSTRAINT [DF_Questionnaire_Daycare] DEFAULT ((1)) NULL,
    [CreatedDate]               DATETIME CONSTRAINT [DF_Questionnaire_CreatedDate] DEFAULT (getdate()) NULL,
    [ModifiedDate]              DATETIME NULL,
    [RemodelPropertyDate]       DATETIME NULL,
    [RemodeledPropertyAge]      AS       ([dbo].[udf_CalculateAge]([RemodelPropertyDate], getdate())),
    [PaintDate]                 DATETIME NULL,
    [PaintAge]                  AS       ([dbo].[udf_CalculateAge]([PaintDate], getdate())),
    [ReviewStatusID]            TINYINT  NULL,
    [Mouthing]                  BIT      NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_Questionnaire] PRIMARY KEY CLUSTERED ([QuestionnaireID] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Questionnaire])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Questionnaire] ON;
        INSERT INTO [dbo].[tmp_ms_xx_Questionnaire] ([QuestionnaireID], [PersonID], [QuestionnaireDate], [QuestionnaireDataSourceID], [VisitRemodeledProperty], [isExposedtoPeelingPaint], [isTakingVitamins], [isNursing], [isUsingPacifier], [isUsingBottle], [BitesNails], [NonFoodEating], [NonFoodinMouth], [EatOutside], [Suckling], [FrequentHandWashing], [Daycare], [CreatedDate], [ModifiedDate], [RemodelPropertyDate], [PaintDate], [ReviewStatusID], [Mouthing])
        SELECT   [QuestionnaireID],
                 [PersonID],
                 [QuestionnaireDate],
                 [QuestionnaireDataSourceID],
                 [VisitRemodeledProperty],
                 [isExposedtoPeelingPaint],
                 [isTakingVitamins],
                 [isNursing],
                 [isUsingPacifier],
                 [isUsingBottle],
                 [BitesNails],
                 [NonFoodEating],
                 [NonFoodinMouth],
                 [EatOutside],
                 [Suckling],
                 [FrequentHandWashing],
                 [Daycare],
                 [CreatedDate],
                 [ModifiedDate],
                 [RemodelPropertyDate],
                 [PaintDate],
                 [ReviewStatusID],
                 [Mouthing]
        FROM     [dbo].[Questionnaire]
        ORDER BY [QuestionnaireID] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Questionnaire] OFF;
    END

DROP TABLE [dbo].[Questionnaire];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Questionnaire]', N'Questionnaire';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_Questionnaire]', N'PK_Questionnaire', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating [dbo].[FK_PersonNotes_Person]...';


GO
ALTER TABLE [dbo].[PersonNotes] WITH NOCHECK
    ADD CONSTRAINT [FK_PersonNotes_Person] FOREIGN KEY ([PersonID]) REFERENCES [dbo].[Person] ([PersonID]);


GO
PRINT N'Creating [dbo].[FK_PersonReleaseNotes_Person]...';


GO
ALTER TABLE [dbo].[PersonReleaseNotes] WITH NOCHECK
    ADD CONSTRAINT [FK_PersonReleaseNotes_Person] FOREIGN KEY ([PersonID]) REFERENCES [dbo].[Person] ([PersonID]);


GO
PRINT N'Creating [dbo].[FK_PersontoAccessAgreement_Person]...';


GO
ALTER TABLE [dbo].[PersontoAccessAgreement] WITH NOCHECK
    ADD CONSTRAINT [FK_PersontoAccessAgreement_Person] FOREIGN KEY ([PersonID]) REFERENCES [dbo].[Person] ([PersonID]);


GO
PRINT N'Creating [dbo].[FK_Person_ReviewStatus]...';


GO
ALTER TABLE [dbo].[Person] WITH NOCHECK
    ADD CONSTRAINT [FK_Person_ReviewStatus] FOREIGN KEY ([ReviewStatusID]) REFERENCES [dbo].[ReviewStatus] ([ReviewStatusID]);


GO
PRINT N'Creating [dbo].[FK_PersontoDaycare_PersontoDaycare]...';


GO
ALTER TABLE [dbo].[PersontoDaycare] WITH NOCHECK
    ADD CONSTRAINT [FK_PersontoDaycare_PersontoDaycare] FOREIGN KEY ([PersonID]) REFERENCES [dbo].[Person] ([PersonID]);


GO
PRINT N'Creating [dbo].[FK_Questionnaire_Person]...';


GO
ALTER TABLE [dbo].[Questionnaire] WITH NOCHECK
    ADD CONSTRAINT [FK_Questionnaire_Person] FOREIGN KEY ([PersonID]) REFERENCES [dbo].[Person] ([PersonID]);


GO
PRINT N'Creating [dbo].[FK_PersontoEmployer_Person]...';


GO
ALTER TABLE [dbo].[PersontoEmployer] WITH NOCHECK
    ADD CONSTRAINT [FK_PersontoEmployer_Person] FOREIGN KEY ([PersonID]) REFERENCES [dbo].[Person] ([PersonID]);


GO
PRINT N'Creating [dbo].[FK_PersontoEthnicity_Person]...';


GO
ALTER TABLE [dbo].[PersontoEthnicity] WITH NOCHECK
    ADD CONSTRAINT [FK_PersontoEthnicity_Person] FOREIGN KEY ([PersonID]) REFERENCES [dbo].[Person] ([PersonID]);


GO
PRINT N'Creating [dbo].[FK_PersontoFamily_Person]...';


GO
ALTER TABLE [dbo].[PersontoFamily] WITH NOCHECK
    ADD CONSTRAINT [FK_PersontoFamily_Person] FOREIGN KEY ([PersonID]) REFERENCES [dbo].[Person] ([PersonID]);


GO
PRINT N'Creating [dbo].[FK_PersontoForeignFood_Person]...';


GO
ALTER TABLE [dbo].[PersontoForeignFood] WITH NOCHECK
    ADD CONSTRAINT [FK_PersontoForeignFood_Person] FOREIGN KEY ([PersonID]) REFERENCES [dbo].[Person] ([PersonID]);


GO
PRINT N'Creating [dbo].[FK_PersontoHobby_Person]...';


GO
ALTER TABLE [dbo].[PersontoHobby] WITH NOCHECK
    ADD CONSTRAINT [FK_PersontoHobby_Person] FOREIGN KEY ([PersonID]) REFERENCES [dbo].[Person] ([PersonID]);


GO
PRINT N'Creating [dbo].[FK_PersontoHomeRemedy_Person]...';


GO
ALTER TABLE [dbo].[PersontoHomeRemedy] WITH NOCHECK
    ADD CONSTRAINT [FK_PersontoHomeRemedy_Person] FOREIGN KEY ([PersonID]) REFERENCES [dbo].[Person] ([PersonID]);


GO
PRINT N'Creating [dbo].[FK_PersontoInsurance_Person]...';


GO
ALTER TABLE [dbo].[PersontoInsurance] WITH NOCHECK
    ADD CONSTRAINT [FK_PersontoInsurance_Person] FOREIGN KEY ([PersonID]) REFERENCES [dbo].[Person] ([PersonID]);


GO
PRINT N'Creating [dbo].[FK_BloodTestResults_Person]...';


GO
ALTER TABLE [dbo].[BloodTestResults] WITH NOCHECK
    ADD CONSTRAINT [FK_BloodTestResults_Person] FOREIGN KEY ([PersonID]) REFERENCES [dbo].[Person] ([PersonID]);


GO
PRINT N'Creating [dbo].[FK_PersontoLanguage_Person]...';


GO
ALTER TABLE [dbo].[PersontoLanguage] WITH NOCHECK
    ADD CONSTRAINT [FK_PersontoLanguage_Person] FOREIGN KEY ([PersonID]) REFERENCES [dbo].[Person] ([PersonID]);


GO
PRINT N'Creating [dbo].[FK_PersontoOccupation_Person]...';


GO
ALTER TABLE [dbo].[PersontoOccupation] WITH NOCHECK
    ADD CONSTRAINT [FK_PersontoOccupation_Person] FOREIGN KEY ([PersonID]) REFERENCES [dbo].[Person] ([PersonID]);


GO
PRINT N'Creating [dbo].[FK_PersontoPerson_Person1ID]...';


GO
ALTER TABLE [dbo].[PersontoPerson] WITH NOCHECK
    ADD CONSTRAINT [FK_PersontoPerson_Person1ID] FOREIGN KEY ([Person1ID]) REFERENCES [dbo].[Person] ([PersonID]);


GO
PRINT N'Creating [dbo].[FK_PersontoPerson_Person2ID]...';


GO
ALTER TABLE [dbo].[PersontoPerson] WITH NOCHECK
    ADD CONSTRAINT [FK_PersontoPerson_Person2ID] FOREIGN KEY ([Person2ID]) REFERENCES [dbo].[Person] ([PersonID]);


GO
PRINT N'Creating [dbo].[FK_PersontoPhoneNumber_Person]...';


GO
ALTER TABLE [dbo].[PersontoPhoneNumber] WITH NOCHECK
    ADD CONSTRAINT [FK_PersontoPhoneNumber_Person] FOREIGN KEY ([PersonID]) REFERENCES [dbo].[Person] ([PersonID]);


GO
PRINT N'Creating [dbo].[FK_PersontoProperty_Person]...';


GO
ALTER TABLE [dbo].[PersontoProperty] WITH NOCHECK
    ADD CONSTRAINT [FK_PersontoProperty_Person] FOREIGN KEY ([PersonID]) REFERENCES [dbo].[Person] ([PersonID]);


GO
PRINT N'Creating [dbo].[FK_PersonToStatus_Person]...';


GO
ALTER TABLE [dbo].[PersonToStatus] WITH NOCHECK
    ADD CONSTRAINT [FK_PersonToStatus_Person] FOREIGN KEY ([PersonID]) REFERENCES [dbo].[Person] ([PersonID]);


GO
PRINT N'Creating [dbo].[FK_PersonToTravelCountry_Person]...';


GO
ALTER TABLE [dbo].[PersonToTravelCountry] WITH NOCHECK
    ADD CONSTRAINT [FK_PersonToTravelCountry_Person] FOREIGN KEY ([PersonID]) REFERENCES [dbo].[Person] ([PersonID]);


GO
PRINT N'Creating [dbo].[FK_PersonTravelNotes_Person]...';


GO
ALTER TABLE [dbo].[PersonTravelNotes] WITH NOCHECK
    ADD CONSTRAINT [FK_PersonTravelNotes_Person] FOREIGN KEY ([PersonID]) REFERENCES [dbo].[Person] ([PersonID]);


GO
PRINT N'Creating [dbo].[FK_Property_Person]...';


GO
ALTER TABLE [dbo].[Property] WITH NOCHECK
    ADD CONSTRAINT [FK_Property_Person] FOREIGN KEY ([OwnerID]) REFERENCES [dbo].[Person] ([PersonID]);


GO
PRINT N'Creating [dbo].[FK_GiftCard_Person]...';


GO
ALTER TABLE [dbo].[GiftCard] WITH NOCHECK
    ADD CONSTRAINT [FK_GiftCard_Person] FOREIGN KEY ([PersonID]) REFERENCES [dbo].[Person] ([PersonID]);


GO
PRINT N'Creating [dbo].[FK_PersonHobbyNotes_Person]...';


GO
ALTER TABLE [dbo].[PersonHobbyNotes] WITH NOCHECK
    ADD CONSTRAINT [FK_PersonHobbyNotes_Person] FOREIGN KEY ([PersonID]) REFERENCES [dbo].[Person] ([PersonID]);


GO
PRINT N'Creating [dbo].[trUpdatePerson]...';


GO
create trigger trUpdatePerson on Person AFTER UPDATE
	as
	 begin
	  if @@rowcount = 0
		return
	  if not update(ModifiedDate) update Person set ModifiedDate = getdate() where PersonID in (select PersonID from inserted)

	end
GO
PRINT N'Creating [dbo].[FK_Questionnaire_ReviewStatus]...';


GO
ALTER TABLE [dbo].[Questionnaire] WITH NOCHECK
    ADD CONSTRAINT [FK_Questionnaire_ReviewStatus] FOREIGN KEY ([ReviewStatusID]) REFERENCES [dbo].[ReviewStatus] ([ReviewStatusID]);


GO
PRINT N'Creating [dbo].[FK_QuestionnaireNotes_Questionnaire]...';


GO
ALTER TABLE [dbo].[QuestionnaireNotes] WITH NOCHECK
    ADD CONSTRAINT [FK_QuestionnaireNotes_Questionnaire] FOREIGN KEY ([QuestionnaireID]) REFERENCES [dbo].[Questionnaire] ([QuestionnaireID]);


GO
PRINT N'Creating [dbo].[trUpdateQuestionnaire]...';


GO
create trigger trUpdateQuestionnaire on Questionnaire AFTER UPDATE
	as
	 begin
	  if @@rowcount = 0
		return
	  if not update(ModifiedDate) update Questionnaire set ModifiedDate = getdate() where QuestionnaireID in (select QuestionnaireID from inserted)

	end
GO
PRINT N'Altering [dbo].[udf_DateInThePast]...';


GO
-- =============================================
-- Author:		Liam Thier
-- Create date: 20150220
-- Description:	function to ensure date is less than current date
-- =============================================
ALTER FUNCTION udf_DateInThePast 
(
	-- Add the parameters for the function here
	@CheckDate date
)
RETURNS bit
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result bit

	-- Add the T-SQL statements to compute the return value here
	IF (@CheckDate < GetDate())
		SET @Result = 1;
	ELSE 
		SET @Result = 0;

	-- Return the result of the function
	RETURN @Result

END
GO
PRINT N'Creating [dbo].[ck_BloodTestResults_SampleDate]...';


GO
ALTER TABLE [dbo].[BloodTestResults] WITH NOCHECK
    ADD CONSTRAINT [ck_BloodTestResults_SampleDate] CHECK ([dbo].[udf_DateInThePast]([SampleDate])=(1));


GO
PRINT N'Creating [dbo].[ck_MediumSampleResults_MediumSampleDate]...';


GO
ALTER TABLE [dbo].[MediumSampleResults] WITH NOCHECK
    ADD CONSTRAINT [ck_MediumSampleResults_MediumSampleDate] CHECK ([dbo].[udf_DateInThePast]([MediumSampleDate])=(1));


GO
PRINT N'Creating [dbo].[ck_PropertySampleResults_LabSubmissionDate]...';


GO
ALTER TABLE [dbo].[PropertySampleResults] WITH NOCHECK
    ADD CONSTRAINT [ck_PropertySampleResults_LabSubmissionDate] CHECK ([dbo].[udf_DateInThePast]([LabSubmissionDate])=(1));


GO
PRINT N'Creating [dbo].[ck_Remediation_RemediationApprovalDate]...';


GO
ALTER TABLE [dbo].[Remediation] WITH NOCHECK
    ADD CONSTRAINT [ck_Remediation_RemediationApprovalDate] CHECK ([dbo].[udf_DateInThePast]([RemediationApprovalDate])=(1));


GO
PRINT N'Creating [dbo].[ck_RemediationActionPlan_RemediationActionPlanApprovalDate]...';


GO
ALTER TABLE [dbo].[RemediationActionPlan] WITH NOCHECK
    ADD CONSTRAINT [ck_RemediationActionPlan_RemediationActionPlanApprovalDate] CHECK ([dbo].[udf_DateInThePast]([RemediationActionPlanApprovalDate])=(1));


GO
PRINT N'Creating [dbo].[ck_Person_BirthDate]...';


GO
ALTER TABLE [dbo].[Person] WITH NOCHECK
    ADD CONSTRAINT [ck_Person_BirthDate] CHECK ([dbo].[udf_DateInThePast]([BirthDate])=(1));


GO
PRINT N'Creating [dbo].[ck_Person_MovedDate]...';


GO
ALTER TABLE [dbo].[Person] WITH NOCHECK
    ADD CONSTRAINT [ck_Person_MovedDate] CHECK ([dbo].[udf_DateInThePast]([MovedDate])=(1) OR [MovedDate] IS NULL);


GO
PRINT N'Creating [dbo].[ck_Questionnaire_PaintDate]...';


GO
ALTER TABLE [dbo].[Questionnaire] WITH NOCHECK
    ADD CONSTRAINT [ck_Questionnaire_PaintDate] CHECK ([dbo].[udf_DateInThePast]([PaintDate])=(1) OR [PaintDate] IS NULL);


GO
PRINT N'Creating [dbo].[ck_Questionnaire_QuestionnaireDate]...';


GO
ALTER TABLE [dbo].[Questionnaire] WITH NOCHECK
    ADD CONSTRAINT [ck_Questionnaire_QuestionnaireDate] CHECK ([dbo].[udf_DateInThePast]([QuestionnaireDate])=(1));


GO
PRINT N'Creating [dbo].[ck_Questionnaire_RemodelPropertyDate]...';


GO
ALTER TABLE [dbo].[Questionnaire] WITH NOCHECK
    ADD CONSTRAINT [ck_Questionnaire_RemodelPropertyDate] CHECK ([dbo].[udf_DateInThePast]([RemodelPropertyDate])=(1) OR [RemodelPropertyDate] IS NULL);


GO
PRINT N'Creating [dbo].[vNursingMothers]...';


GO
CREATE View vNursingMothers
AS
	Select P.PersonID, P.LastName,P.FirstName,P.Age
			, Q1.isNursing, Q2.QuestionnaireDate 
			, Q2.QuestionnaireID
	From [questionnaire] As Q1
	Inner Join (
		Select max(QuestionnaireID) AS QuestionnaireID,personID
			  ,max(QuestionnaireDate) as [QuestionnaireDate]
		From [Questionnaire]
		Group By [personID]) As [Q2]
	On Q1.QuestionnaireID = Q2.QuestionnaireID
	INNER JOIN Person AS P on P.PersonID = Q1.PersonID
	where Q1.isNursing = 1
GO
PRINT N'Altering [dbo].[TransProc]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
ALTER PROCEDURE TransProc @PriKey INT, @CharCol CHAR(3) AS
BEGIN TRANSACTION InProc
INSERT INTO TestTrans VALUES (@PriKey, @CharCol)
INSERT INTO TestTrans VALUES (@PriKey + 1, @CharCol)
COMMIT TRANSACTION InProc;
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [dbo].[usp_SlColumnDetails]...';


GO
-- =============================================
-- Author:		Liam Thier
-- Create date: 20141124
-- Description:	stored procedure to list column details for each column in a table
-- =============================================
ALTER PROCEDURE [usp_SlColumnDetails] 
	-- Add the parameters for the stored procedure here
	@TableName varchar(256) = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT 'Table' = @TableName,
    c.name 'Column Name',
    t.Name 'Data type',
    c.max_length 'Max Length',
    c.precision ,
    c.scale ,
    c.is_nullable,
    ISNULL(i.is_primary_key, 0) 'Primary Key'
	FROM    
		sys.columns c
	INNER JOIN 
		sys.types t ON c.user_type_id = t.user_type_id
	LEFT OUTER JOIN 
		sys.index_columns ic ON ic.object_id = c.object_id AND ic.column_id = c.column_id
	LEFT OUTER JOIN 
		sys.indexes i ON ic.object_id = i.object_id AND ic.index_id = i.index_id
	WHERE
		c.object_id = OBJECT_ID(@TableName)
END
GO
PRINT N'Creating [dbo].[Person].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'collection of people and basic attributes', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'Person';


GO
PRINT N'Creating [dbo].[Person].[PersonID].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'unique identifier for each person', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'Person', @level2type = N'COLUMN', @level2name = N'PersonID';


GO
PRINT N'Creating [dbo].[Person].[GuardianID].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'personID of the person''s guardian', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'Person', @level2type = N'COLUMN', @level2name = N'GuardianID';


GO
PRINT N'Creating [dbo].[Questionnaire].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'collection of questionnaire questions and answers, typically only completed by flagged patients', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'Questionnaire';


GO
PRINT N'Creating [dbo].[Questionnaire].[QuestionnaireID].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'unique identifier for the questionnaire object', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'Questionnaire', @level2type = N'COLUMN', @level2name = N'QuestionnaireID';


GO
PRINT N'Creating [dbo].[Questionnaire].[PersonID].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'id of the patient the questionnaire is referring to', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'Questionnaire', @level2type = N'COLUMN', @level2name = N'PersonID';


GO
PRINT N'Creating [dbo].[Questionnaire].[QuestionnaireDataSourceID].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'id of the person completing the questionnaire', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'Questionnaire', @level2type = N'COLUMN', @level2name = N'QuestionnaireDataSourceID';


GO
PRINT N'Creating [dbo].[Questionnaire].[VisitRemodeledProperty].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'0 = no; 1 = yes.  has the patient visited remodeled properties', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'Questionnaire', @level2type = N'COLUMN', @level2name = N'VisitRemodeledProperty';


GO
PRINT N'Creating [dbo].[Questionnaire].[isExposedtoPeelingPaint].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'has the patient been exposed to peeling paint', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'Questionnaire', @level2type = N'COLUMN', @level2name = N'isExposedtoPeelingPaint';


GO
PRINT N'Creating [dbo].[Questionnaire].[isTakingVitamins].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'0 = no; 1 = yes.  Is the patient taking vitamins regularly', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'Questionnaire', @level2type = N'COLUMN', @level2name = N'isTakingVitamins';


GO
PRINT N'Creating [dbo].[Questionnaire].[isNursing].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'is the patient nursing', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'Questionnaire', @level2type = N'COLUMN', @level2name = N'isNursing';


GO
PRINT N'Creating [dbo].[Questionnaire].[isUsingPacifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'is the patient using a pacifier', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'Questionnaire', @level2type = N'COLUMN', @level2name = N'isUsingPacifier';


GO
PRINT N'Creating [dbo].[Questionnaire].[isUsingBottle].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'is the patient using a bottle', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'Questionnaire', @level2type = N'COLUMN', @level2name = N'isUsingBottle';


GO
PRINT N'Creating [dbo].[Questionnaire].[BitesNails].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'does the patient bite nails', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'Questionnaire', @level2type = N'COLUMN', @level2name = N'BitesNails';


GO
PRINT N'Creating [dbo].[Questionnaire].[NonFoodEating].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'does the patient consume non food products', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'Questionnaire', @level2type = N'COLUMN', @level2name = N'NonFoodEating';


GO
PRINT N'Creating [dbo].[Questionnaire].[NonFoodinMouth].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'does the patient put non food items in mouth?', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'Questionnaire', @level2type = N'COLUMN', @level2name = N'NonFoodinMouth';


GO
PRINT N'Creating [dbo].[Questionnaire].[EatOutside].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'does the patient eat outside?', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'Questionnaire', @level2type = N'COLUMN', @level2name = N'EatOutside';


GO
PRINT N'Creating [dbo].[Questionnaire].[Suckling].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'does the patient suck his/her thumb or suckle', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'Questionnaire', @level2type = N'COLUMN', @level2name = N'Suckling';


GO
PRINT N'Creating [dbo].[Questionnaire].[FrequentHandWashing].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'does the patient frequently wash hands througout the day', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'Questionnaire', @level2type = N'COLUMN', @level2name = N'FrequentHandWashing';


GO
PRINT N'Creating [dbo].[Questionnaire].[Daycare].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'0 = no; 1 = yes; does the patient attend daycare on a regular basis', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'Questionnaire', @level2type = N'COLUMN', @level2name = N'Daycare';


GO
PRINT N'Creating [dbo].[Questionnaire].[Mouthing].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'does the client mouth things frequently', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'Questionnaire', @level2type = N'COLUMN', @level2name = N'Mouthing';


GO
PRINT N'Creating [dbo].[vNursingMothers].[MS_DiagramPane1]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_DiagramPane1', @value = N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[40] 4[20] 2[20] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "u"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 136
               Right = 255
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "q"
            Begin Extent = 
               Top = 6
               Left = 293
               Bottom = 119
               Right = 467
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 1035
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'vNursingMothers';


GO
PRINT N'Creating [dbo].[vNursingMothers].[MS_DiagramPaneCount]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_DiagramPaneCount', @value = 1, @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'vNursingMothers';


GO
PRINT N'Creating [dbo].[FK_PersontoPerson_Person1ID].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'1st person in the relationship', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'PersontoPerson', @level2type = N'CONSTRAINT', @level2name = N'FK_PersontoPerson_Person1ID';


GO
PRINT N'Creating [dbo].[FK_PersontoPerson_Person2ID].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'2nd person in the relationship', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'PersontoPerson', @level2type = N'CONSTRAINT', @level2name = N'FK_PersontoPerson_Person2ID';


GO
PRINT N'Refreshing [dbo].[usp_InsertBloodTestResults]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_InsertBloodTestResults]';


GO
PRINT N'Refreshing [dbo].[usp_InsertGiftCard]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_InsertGiftCard]';


GO
PRINT N'Refreshing [dbo].[usp_InsertPerson]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_InsertPerson]';


GO
PRINT N'Refreshing [dbo].[usp_SLAllBloodTestResultsMetaData]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_SLAllBloodTestResultsMetaData]';


GO
PRINT N'Refreshing [dbo].[usp_SlCountPeopleByAgeGroup]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_SlCountPeopleByAgeGroup]';


GO
PRINT N'Refreshing [dbo].[usp_SLInsertedDataSimplified]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_SLInsertedDataSimplified]';


GO
PRINT N'Refreshing [dbo].[usp_upPerson]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_upPerson]';


GO
PRINT N'Refreshing [dbo].[usp_InsertQuestionnaire]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_InsertQuestionnaire]';


GO
PRINT N'Refreshing [dbo].[usp_InsertNewBloodLeadTestResultsWebScreen]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_InsertNewBloodLeadTestResultsWebScreen]';


GO
PRINT N'Refreshing [dbo].[usp_InsertNewClientWebScreen]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_InsertNewClientWebScreen]';


GO
PRINT N'Refreshing [dbo].[usp_upClientWebScreen]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_upClientWebScreen]';


GO
PRINT N'Refreshing [dbo].[usp_InsertNewQuestionnaireWebScreen]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_InsertNewQuestionnaireWebScreen]';


GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[PersonNotes] WITH CHECK CHECK CONSTRAINT [FK_PersonNotes_Person];

ALTER TABLE [dbo].[PersonReleaseNotes] WITH CHECK CHECK CONSTRAINT [FK_PersonReleaseNotes_Person];

ALTER TABLE [dbo].[PersontoAccessAgreement] WITH CHECK CHECK CONSTRAINT [FK_PersontoAccessAgreement_Person];

ALTER TABLE [dbo].[Person] WITH CHECK CHECK CONSTRAINT [FK_Person_ReviewStatus];

ALTER TABLE [dbo].[PersontoDaycare] WITH CHECK CHECK CONSTRAINT [FK_PersontoDaycare_PersontoDaycare];

ALTER TABLE [dbo].[Questionnaire] WITH CHECK CHECK CONSTRAINT [FK_Questionnaire_Person];

ALTER TABLE [dbo].[PersontoEmployer] WITH CHECK CHECK CONSTRAINT [FK_PersontoEmployer_Person];

ALTER TABLE [dbo].[PersontoEthnicity] WITH CHECK CHECK CONSTRAINT [FK_PersontoEthnicity_Person];

ALTER TABLE [dbo].[PersontoFamily] WITH CHECK CHECK CONSTRAINT [FK_PersontoFamily_Person];

ALTER TABLE [dbo].[PersontoForeignFood] WITH CHECK CHECK CONSTRAINT [FK_PersontoForeignFood_Person];

ALTER TABLE [dbo].[PersontoHobby] WITH CHECK CHECK CONSTRAINT [FK_PersontoHobby_Person];

ALTER TABLE [dbo].[PersontoHomeRemedy] WITH CHECK CHECK CONSTRAINT [FK_PersontoHomeRemedy_Person];

ALTER TABLE [dbo].[PersontoInsurance] WITH CHECK CHECK CONSTRAINT [FK_PersontoInsurance_Person];

ALTER TABLE [dbo].[BloodTestResults] WITH CHECK CHECK CONSTRAINT [FK_BloodTestResults_Person];

ALTER TABLE [dbo].[PersontoLanguage] WITH CHECK CHECK CONSTRAINT [FK_PersontoLanguage_Person];

ALTER TABLE [dbo].[PersontoOccupation] WITH CHECK CHECK CONSTRAINT [FK_PersontoOccupation_Person];

ALTER TABLE [dbo].[PersontoPerson] WITH CHECK CHECK CONSTRAINT [FK_PersontoPerson_Person1ID];

ALTER TABLE [dbo].[PersontoPerson] WITH CHECK CHECK CONSTRAINT [FK_PersontoPerson_Person2ID];

ALTER TABLE [dbo].[PersontoPhoneNumber] WITH CHECK CHECK CONSTRAINT [FK_PersontoPhoneNumber_Person];

ALTER TABLE [dbo].[PersontoProperty] WITH CHECK CHECK CONSTRAINT [FK_PersontoProperty_Person];

ALTER TABLE [dbo].[PersonToStatus] WITH CHECK CHECK CONSTRAINT [FK_PersonToStatus_Person];

ALTER TABLE [dbo].[PersonToTravelCountry] WITH CHECK CHECK CONSTRAINT [FK_PersonToTravelCountry_Person];

ALTER TABLE [dbo].[PersonTravelNotes] WITH CHECK CHECK CONSTRAINT [FK_PersonTravelNotes_Person];

ALTER TABLE [dbo].[Property] WITH CHECK CHECK CONSTRAINT [FK_Property_Person];

ALTER TABLE [dbo].[GiftCard] WITH CHECK CHECK CONSTRAINT [FK_GiftCard_Person];

ALTER TABLE [dbo].[PersonHobbyNotes] WITH CHECK CHECK CONSTRAINT [FK_PersonHobbyNotes_Person];

ALTER TABLE [dbo].[Questionnaire] WITH CHECK CHECK CONSTRAINT [FK_Questionnaire_ReviewStatus];

ALTER TABLE [dbo].[QuestionnaireNotes] WITH CHECK CHECK CONSTRAINT [FK_QuestionnaireNotes_Questionnaire];

ALTER TABLE [dbo].[BloodTestResults] WITH CHECK CHECK CONSTRAINT [ck_BloodTestResults_SampleDate];

ALTER TABLE [dbo].[MediumSampleResults] WITH CHECK CHECK CONSTRAINT [ck_MediumSampleResults_MediumSampleDate];

ALTER TABLE [dbo].[PropertySampleResults] WITH CHECK CHECK CONSTRAINT [ck_PropertySampleResults_LabSubmissionDate];

ALTER TABLE [dbo].[Remediation] WITH CHECK CHECK CONSTRAINT [ck_Remediation_RemediationApprovalDate];

ALTER TABLE [dbo].[RemediationActionPlan] WITH CHECK CHECK CONSTRAINT [ck_RemediationActionPlan_RemediationActionPlanApprovalDate];

ALTER TABLE [dbo].[Person] WITH CHECK CHECK CONSTRAINT [ck_Person_BirthDate];

ALTER TABLE [dbo].[Person] WITH CHECK CHECK CONSTRAINT [ck_Person_MovedDate];

ALTER TABLE [dbo].[Questionnaire] WITH CHECK CHECK CONSTRAINT [ck_Questionnaire_PaintDate];

ALTER TABLE [dbo].[Questionnaire] WITH CHECK CHECK CONSTRAINT [ck_Questionnaire_QuestionnaireDate];

ALTER TABLE [dbo].[Questionnaire] WITH CHECK CHECK CONSTRAINT [ck_Questionnaire_RemodelPropertyDate];


GO
PRINT N'Update complete.';


GO
